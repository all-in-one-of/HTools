<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="tool_2" label="Set Material" icon="hicon:/SVGIcons.index?SHOP_material.svg">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
objs = hou.node('/obj').children()
choices = []
for obj in objs:
    if obj.type().name() == 'geo':
        choices.append(obj.name()) 



for node in nodes:
    node_name = node.parent().type().name()
    print node_name
    if (node_name == 'shop' or node_name == 'mat'):
        answers = hou.ui.selectFromList(choices,title = node.name())
        for answer in answers:
            objName = choices[answer]
            obj = hou.node('/obj').node(objName)
            obj.parm('shop_materialpath').set(node.path())]]></script>
  </tool>

  <toolshelf name="LZ Depricated" label="LZ Depricated">
    <memberTool name="tool_2"/>
    <memberTool name="Install Otl Lib"/>
    <memberTool name="ropnet3"/>
    <memberTool name="LZ Create Visualisers"/>
  </toolshelf>

  <tool name="Install Otl Lib" label="Install Otl Lib" icon="hicon:/SVGIcons.index?VOP_subnetconnector.svg">
    <script scriptType="python"><![CDATA[import lzutil
lzutil.installOtlLibsUI()

'''
import glob
path = hou.expandString("$OTLS") + "\\*/"
libs =  glob.glob(path)
libs = [e.split("\\")[-2] for e in libs]
print libs

answer =  hou.ui.selectFromList(libs)
for ans in answer:
    lib = libs[ans]
    installOtlLib(lib)
    print  "\nimport lzutil\nlzutil.installOtlLib('"+lib +"')"
    hou.appendSessionModuleSource( "import lzutil\nlzutil.installOtlLib('"+lib +"')" )
''']]></script>
  </tool>

  <tool name="ropnet3" label="WEDGE_ROP_v4" icon="NETWORKS_rop">
    <helpURL>operator:Sop/ropnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/ropnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('ropnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_ShockWaves_WEDGE_ROP_v4 (Sop/ropnet)
set _obj_ShockWaves_WEDGE_ROP_v4 = `run("opadd -e -n -v ropnet WEDGE_ROP_v4")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_ShockWaves_WEDGE_ROP_v4
opspareds '    parm {   name    "execute2"      label   "Render Wedges"         type    button  joinnext        default { "0" }         parmtag { "autoscope" "0000000000000000" }      parmtag { "takecontrol" "always" }     }     parm {     name    "execute"       baseparm        label   "Render"        invisible       joinnext        export  none     }     parm {   name    "renderdialog"  baseparm        label   "Controls..."   export  none     }     parm {   name    "wedge"         label   "Wedge"         type    integer         default { "0" }         range   { 0 10 }     }     groupsimple {        name    "folder0"       label   "Wedge Settings"        parm {      name        "range1"            label       "Range"             type        intvector2          size        2           default     { "1" "3" }         range       { -1 1 }            parmtag     { "autoscope" "0000000000000000" }      }       parm {      name        "steps1"            label       "Number of Steps"           type        integer             default     { "3" }             range       { 1 10 }            parmtag     { "autoscope" "0000000000000000" }      }     }      groupsimple {      name    "folder1"       label   "Wedge Variables"       parm {      name        "parm1"             label       "Parm"      type        float       joinnext        default     { "0" }             range       { 0 10 }        }       parm {      name        "parm1_range"       label       "Range"             type        vector2             size        2           default     { "0" "0" }         range       { -1 1 }        }     }      parm {     name    "add_filecache"         label   "Add Filecache"         type    button  default { "0" }         parmtag { "script_callback" "name = \'geo\' + str(len(hou.pwd().children()));n = hou.copyNodesTo([(hou.pwd().node(\\"temp\\"))],hou.pwd())[0];ptg = hou.pwd().parmTemplateGroup();string = ptg.find(\'geo1\');string.setName(name);ptg.addParmTemplate(string);hou.pwd().setParmTemplateGroup(ptg);n.setName(name);n.parm(\'soppath\').setExpression(\'chsop(\\"../\' + name + \'\\")\');n.setFirstInput(hou.pwd().node(\'wedge\').inputs()[0]);hou.pwd().node(\'wedge\').setFirstInput(n);hou.pwd().layoutChildren();n.setSelected(False);hou.pwd().setSelected(True)" }       parmtag { "script_callback_language" "python" }     }     parm {        name    "geo1"  label   "SOP Path"      type    oppath  default { "/obj/setup_2/wedge_pop" }    parmtag { "autoscope" "0000000000000000" }      parmtag { "opfilter" "!!SOP!!" }        parmtag { "oprelative" "." }    parmtag { "script_action" "wn = kwargs[\'node\']\\nfcn = hou.node(kwargs[\'parmtuple\'].evalAsStrings()[0])\\n\\nfcn.parm(\'version\').setExpression(\'ch(\\"../\' + wn.name() + \'/wedge\\")\')\\n\\n" }       parmtag { "script_callback" "" }        parmtag { "script_callback_language" "python" }     } ' $_obj_ShockWaves_WEDGE_ROP_v4
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4 steps1
chkey -t 0 -v 3 -m 0 -a 0 -A 0 -T a  -F 'ch("range1y") - ch("range1x")+1' $_obj_ShockWaves_WEDGE_ROP_v4/steps1
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4 parm1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("parm1_rangex") + (ch("parm1_rangey")-ch("parm1_rangex"))/(ch("steps1")-1)*ch("wedge")' $_obj_ShockWaves_WEDGE_ROP_v4/parm1
chblockend
opparm -V 16.0.557 $_obj_ShockWaves_WEDGE_ROP_v4 wedge ( 1 ) range1 ( 0 2 ) steps1 ( steps1 ) parm1 ( parm1 ) parm1_range ( 0 100 ) geo1 ( "" )
chlock $_obj_ShockWaves_WEDGE_ROP_v4 +steps1 +parm1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4
opuserdata -n '___Version___' -v '16.0.557' $_obj_ShockWaves_WEDGE_ROP_v4
opcf $_obj_ShockWaves_WEDGE_ROP_v4

# Node $_obj_ShockWaves_WEDGE_ROP_v4_geo2 (Driver/geometry)
set _obj_ShockWaves_WEDGE_ROP_v4_geo2 = `run("opadd -e -n -v geometry geo2")`
oplocate -x `$arg2 + 50.079599999999999` -y `$arg3 + -208.864` $_obj_ShockWaves_WEDGE_ROP_v4_geo2
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 f1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f1")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/f1
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 f2
chkey -t 0 -v 240 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f2")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/f2
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 f3
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f3")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/f3
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 soppath
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chsop("../geo1")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/soppath
chblockend
opparm -V 16.0.557 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 trange ( normal ) f ( f1 f2 f3 ) soppath ( soppath ) sopoutput ( '`chs( chs("soppath") + "/file")`' ) prerender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(0)' ) lprerender ( python ) postrender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(1)' ) lpostrender ( python )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4_geo2
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4_geo2
opuserdata -n '___Version___' -v '16.0.557' $_obj_ShockWaves_WEDGE_ROP_v4_geo2

# Node $_obj_ShockWaves_WEDGE_ROP_v4_wedge (Driver/wedge)
set _obj_ShockWaves_WEDGE_ROP_v4_wedge = `run("opadd -e -n -v wedge wedge")`
oplocate -x `$arg2 + 50.079599999999999` -y `$arg3 + -209.78700000000001` $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opparm $_obj_ShockWaves_WEDGE_ROP_v4_wedge  wedgeparams ( 1 )
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge execute
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../execute2")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/execute
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge range1x
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../range1x")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/range1x
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge range1y
chkey -t 0 -v 3 -m 0 -a 0 -A 0 -T a  -F 'ch("../range1y")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/range1y
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge steps1
chkey -t 0 -v 3 -m 0 -a 0 -A 0 -T a  -F 'ch("../steps1")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/steps1
chblockend
opparm $_obj_ShockWaves_WEDGE_ROP_v4_wedge execute ( execute ) driver ( /obj/setup_2/test_wedge ) random ( off ) wedgeparams ( 1 ) chan1 ( ../wedge ) range1 ( range1x range1y ) steps1 ( steps1 )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opuserdata -n '___Version___' -v '' $_obj_ShockWaves_WEDGE_ROP_v4_wedge

# Node $_obj_ShockWaves_WEDGE_ROP_v4_temp (Driver/geometry)
set _obj_ShockWaves_WEDGE_ROP_v4_temp = `run("opadd -e -n -v geometry temp")`
oplocate -x `$arg2 + 53.3949` -y `$arg3 + -208.864` $_obj_ShockWaves_WEDGE_ROP_v4_temp
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp f1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f1")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/f1
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp f2
chkey -t 0 -v 240 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f2")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/f2
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp f3
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f3")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/f3
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp soppath
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chsop("../geo1")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/soppath
chblockend
opparm -V 16.0.557 $_obj_ShockWaves_WEDGE_ROP_v4_temp trange ( normal ) f ( f1 f2 f3 ) soppath ( soppath ) sopoutput ( '`chs( chs("soppath") + "/file")`' ) prerender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(0)' ) lprerender ( python ) postrender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(1)' ) lpostrender ( python )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4_temp
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4_temp
opuserdata -n '___Version___' -v '16.0.557' $_obj_ShockWaves_WEDGE_ROP_v4_temp
oporder -e geo2 wedge temp 
opcf ..
opset -p on $_obj_ShockWaves_WEDGE_ROP_v4

opcf $arg1
opcf $_obj_ShockWaves_WEDGE_ROP_v4
opwire -n $_obj_ShockWaves_WEDGE_ROP_v4_geo2 -0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_ShockWaves_WEDGE_ROP_v4
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_ShockWaves_WEDGE_ROP_v4
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="LZ Create Visualisers" label="LZ Create Visualisers" icon="hicon:/SVGIcons.index?NODEFLAGS_display.svg">
    <script scriptType="python"><![CDATA[import lzutil
import toolutils
n = lzutil.viewNode()
geo = n.geometry()
pt_attribs = geo.pointAttribs()

sv = toolutils.sceneViewer()
vp = sv.curViewport()

att_names = []
pt_attribs_filtered = []

for att in pt_attribs:
    if att.name()!='P' and att.name()!='N' and att.name()!='v':
        att_names += [att.name()]
        pt_attribs_filtered += [att]

ans = hou.ui.selectFromList(att_names)

for id  in ans:
    att = pt_attribs_filtered[id]
    size = att.size()        
    v = hou.viewportVisualizers.createVisualizer(hou.viewportVisualizers.type('vis_marker'))
    v.setName(att.name())
    v.setLabel(att.name())
    v.setParm('attrib',att.name())
    if size > 2:
        v.setParm('style','vector')
    v.setIsActive(1,vp)    
]]></script>
  </tool>
</shelfDocument>
