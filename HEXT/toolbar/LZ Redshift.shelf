<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ_Redshift" label="LZ Redshift">
    <memberTool name="LZ RS Setup"/>
    <memberTool name="rs_cam_from_view"/>
    <memberTool name="LZ RS LightDome"/>
    <memberTool name="Rs vol shader"/>
    <memberTool name="Rs Directional Light"/>
    <memberTool name="Rs Light Sun"/>
    <memberTool name="aces"/>
    <memberTool name="Import RS_Proxies"/>
    <memberTool name="Add RS Prefix"/>
    <memberTool name="batchProxy"/>
    <memberTool name="AssetPrepare"/>
    <memberTool name="find_all_textures"/>
  </toolshelf>

  <tool name="rs_cam_from_view" label="Rs camera from view" icon="hicon:/SVGIcons.index?OBJ_camera.svg">
    <script scriptType="python"><![CDATA[import objecttoolutils

newnode = objecttoolutils.genericCameraLightTool(kwargs, 'cam', 'cam1',False)
hou.hscript('Redshift_cameraSpareParameters')

newnode.setDisplayFlag(False)
newnode.setName("RS_Cam",1)

newnode.parm("resx").set(1920)
newnode.parm("resy").set(1080)

#newnode = hou.selectedNodes()[0]

# Add custom Focal actions
ptg = newnode.parmTemplateGroup()
# focal point
pt = hou.FloatParmTemplate("f", "Focus point",3)
pt.setTags({"script_action": "n = kwargs[\"node\"]\n\nimport toolutils\nsv = toolutils.sceneViewer()\nsv.setSnappingMode(hou.snappingMode.Prim)\npos = sv.selectPositions(number_of_positions=1)\n\nif pos[0].length() > 0:\n    n.parmTuple(\"f\").set(pos[0])\nsv.setSnappingMode(hou.snappingMode.Off)"})
ptg.addParmTemplate(pt)
# focal distance
pt = hou.FloatParmTemplate("f2t", "Focal2Target", 1)
pt.setTags({"script_action": "n = kwargs[\'node\']\nn.parm(\'RS_campro_dofDistance\').set(n.parm(\"f2t\"))\n"})
pt.setDefaultExpressionLanguage([hou.scriptLanguage.Python])
pt.setDefaultExpression(["(hou.pwd().worldTransform().extractTranslates()-hou.Vector3(hou.pwd().parmTuple('f').eval())).length()"])
ptg.addParmTemplate(pt)



# apply ptg
newnode.setParmTemplateGroup(ptg)

]]></script>
  </tool>

  <tool name="Rs vol shader" label="Rs vol shader" icon="hicon:/SVGIcons.index?SOP_volume.svg">
    <script scriptType="python"><![CDATA[hou.hscript('Redshift_objectSpareParameters')

for n in hou.selectedNodes():   
    shader = hou.node("/shop").createNode("rs_volume",n.name())    
    n.parm('shop_materialpath').set(shader.path())
]]></script>
  </tool>

  <tool name="Rs Directional Light" label="Rs Directional Light" icon="RS_light_icon">
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
kwargs['ctrlclick'] = True

newnode = objecttoolutils.genericCameraLightTool(kwargs, 'rslight')
newnode.parm('RSL_intensityMultiplier').set(1)
newnode.parm('RSL_volumeScale').set(1)
newnode.parm('light_type').set(0)


newnode.setDisplayFlag(False)
newnode.setName('RS_DirectionalLight',True)]]></script>
  </tool>

  <tool name="Rs Light Sun" label="Rs Light Sun" icon="RS_lightSun_icon">
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
kwargs['ctrlclick'] = True

newnode = objecttoolutils.genericCameraLightTool(kwargs, 'rslightsun')

newnode.parm('RSL_volumeScale').set(1)
newnode.setName('RS_Sun')

newnode.setDisplayFlag(False)]]></script>
  </tool>

  <tool name="LZ RS Setup" label="LZ RS Setup" icon="ROP_Redshift_ROP">
    <script scriptType="python"><![CDATA[rs = hou.node("/out/Redshift_ROP1")

if rs is None:
    rs = __import__('roptoolutils').createRenderNode('Redshift_ROP')
    ipr = __import__('roptoolutils').createRenderNode('Redshift_IPR')
    
    rs.parm('RS_renderAOVsToMPlay').set(1)
    rs.parm('RS_outputEnable').set(0)
    rs.parm('RS_outputSkipRendered').set(0)  
    
    rs.parm('MotionBlurDeformationEnabled').set(1)  
    rs.parm('RS_mbPoints').set(1)
    rs.parm('RS_archive_selected').set(1)
    rs.parm('RS_archive_skipFiles').set(1) 
    rs.parm('RS_archive_noXform').set(1)     
    
    rs.parm('RS_outputFileNamePrefix').set('$JOB/Render/001_InitRender/$F4.exr')
    rs.parm('IrradiancePointCloudFilename').set('$JOB/Cache/Redshift/IPC/$F4.rsmap')
    rs.parm('IrradianceCacheFilename').set('$JOB/Cache/Redshift/IRC/$F4.rsmap')
    
    rs.parm("UnifiedMaxSamples").setExpression('ch("UnifiedMinSamples")*4')    
    
    rs.parm('RS_iprOverrideCameraRes').set(0)
    rs.parm('RS_iprUpdateMeshDeform').set(0)
    
    # AOV's
    rs.parm("RS_aov").set(16)
    rs.parm("RS_aovAllAOVsDisabled").set(1)
    
    rs.parm("RS_aovID_1").set(1)
    rs.parm("RS_aovSuffix_1").set('Z')
    rs.parm("RS_aovID_2").set(5)
    rs.parm("RS_aovSuffix_2").set('DiffuseLighting')
    rs.parm("RS_aovID_3").set(8)
    rs.parm("RS_aovSuffix_3").set('SpecularLighting')
    rs.parm("RS_aovID_4").set(11)
    rs.parm("RS_aovSuffix_4").set('Reflections')
    rs.parm("RS_aovID_5").set(14)
    rs.parm("RS_aovSuffix_5").set('Refractions')
    rs.parm("RS_aovID_6").set(18)
    rs.parm("RS_aovSuffix_6").set('GI')
    rs.parm("RS_aovID_7").set(23)
    rs.parm("RS_aovSuffix_7").set('shadows')
    rs.parm("RS_aovID_8").set(24)
    rs.parm("RS_aovSuffix_8").set('N')
    rs.parm("RS_aovID_9").set(37)
    rs.parm("RS_aovSuffix_9").set('background')
    rs.parm("RS_aovID_10").set(41)
    rs.parm("RS_aovSuffix_10").set('cryptomatte')
    rs.parm("RS_aovID_11").set(27)
    rs.parm("RS_aovSuffix_11").set('VolumeLighting')
    rs.parm("RS_aovID_12").set(28)
    rs.parm("RS_aovSuffix_12").set('VolumeFogTint')
    rs.parm("RS_aovID_13").set(29)
    rs.parm("RS_aovSuffix_13").set('VolumeFogEmission')   
    rs.parm("RS_aovID_14").set(9)
    rs.parm("RS_aovSuffix_14").set('SSS') 
    rs.parm("RS_aovID_15").set(0)
    rs.parm("RS_aovSuffix_15").set('P') 
    rs.parm("RS_aovID_16").set(7)
    rs.parm("RS_aovSuffix_16").set('diffuseFilter')     
    
    
    rs.parm("RS_renderCamera").set("/obj/RS_Cam")
    rs.parm("RS_lights_candidate").set("RS_*")
    rs.parm("RS_objects_candidate").set("RS_*")
    rs.parm("RS_addDefaultLight").set(0)
    
    
# Check if we have aprms and render view already
has_render_panel = 0
has_rs_parms = 0
floatingPanels = hou.ui.floatingPanels()
for panel in floatingPanels:
    if panel.name() == 'RenderView':
        has_render_panel = 1
    if panel.name() == 'Render_Settings':
        has_rs_parms = 1
    
# Open Parms Window
if has_rs_parms == 0:
    d = hou.ui.curDesktop()
    
    import ctypes
    user32 = ctypes.windll.user32
    sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
    #pos goes from bottom to top, from left to rigth
    dy = [0.05,0.65];
    dx = [0.57,0.85];
    
    pos = (sz[0] + int(sz[0]*dx[0]),int(sz[1]*(1 - dy[1] - dy[0])))
    size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))
    
    panel = d.createFloatingPanel(hou.paneTabType.Parm,pos,size)
    panel.setName('Render_Settings')
    pane = panel.panes()[0]
    tab = pane.tabs()[0]
    tab.setCurrentNode(rs)
    tab.setPin(1)

#create RenderView
if has_render_panel == 0:
    exec(hou.shelves.tool('Render View').script())]]></script>
  </tool>

  <tool name="LZ RS LightDome" label="LZ RS LightDome" icon="RS_lightDome_icon">
    <script scriptType="python"><![CDATA[import hou,os
obj = hou.node("/obj")
newnode = obj.createNode("rslightdome")
newnode.moveToGoodPosition()

newnode.parm('RSL_volumeScale').set(1)
newnode.setDisplayFlag(False)

default_hdr = "$HMEGA/Assets/HDRI/panorama_map.hdr"
if not os.path.isfile(hou.expandString(default_hdr)):
    default_hdr = "X:/Assets/HDRI/panorama_map.hdr"

newnode.parm('env_map').set(default_hdr)
newnode.parm('ogl_enablelight').set(0)
#newnode.parm('background_enable').set(0)

# Environment alpha replace
newnode.parm('alphaReplaceEnable').set(1)
# Set Name
newnode.setName('RS_DomeLight',True)





# Add LZ Controlls
ptg = newnode.parmTemplateGroup()
# HDR IMAGE
hdr_img = hou.StringParmTemplate("hdr_img",
                            "HDR_img",
                            1,
                            default_value=([]),
                            string_type=hou.stringParmType.FileReference,
                            item_generator_script="""
import os.path
menuItems = []
n = kwargs[\'node\']
folder = n.parm(\'hdr_dir\').eval()
folder = os.path.abspath(folder)

from glob import glob
items =  glob(folder + \"/*\")

for i in items:
    path = i.split(\'\\\\\')
    tex = path.pop()
    if not tex.endswith('.rstexbin'):    
        menuItems += {i}
        menuItems += {tex}        
return menuItems""",
                            item_generator_script_language=hou.scriptLanguage.Python,
                            menu_type=hou.menuType.Normal)                            
hdr_img.setTags({"script_action": "kwargs['node'].parm(\'env_map\').set(kwargs['node'].parm(\'hdr_img\'))"})
ptg.addParmTemplate(hdr_img)
# HDR Folder
default_folder = "S:/CloudStation/Assets/HDRI/Heaven/"
if not os.path.isdir(default_folder):
    default_folder = "X:/Assets/HDRI/Heaven/"
hdr_dir = hou.StringParmTemplate("hdr_dir",
                                "HDR_dir",
                                1,
                                default_value=([default_folder]),
                                string_type=hou.stringParmType.FileReference,
                                item_generator_script_language=hou.scriptLanguage.Python,
                                menu_type=hou.menuType.StringReplace)
hdr_dir.setFileType(hou.fileType.Directory)
ptg.addParmTemplate(hdr_dir)
# Next Button
next_btn = hou.ButtonParmTemplate("next", "Next")
next_btn.setScriptCallback("n = hou.pwd();p = n.parm(\"hdr_img\");mi = p.menuItems();p.set(mi[mi.index(p.eval())+1])")
next_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
ptg.addParmTemplate(next_btn)
# Prev Button
prev_btn = hou.ButtonParmTemplate("prev", "Prev")
prev_btn.setScriptCallback("n = hou.pwd();p = n.parm(\"hdr_img\");mi = p.menuItems();p.set(mi[mi.index(p.eval())-1])")
prev_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
ptg.addParmTemplate(prev_btn)
# Rotate Button
rotate_btn = hou.ButtonParmTemplate("rotate", "Rotate")
rotate_btn.setScriptCallback("hou.pwd().parm(\'ry\').setExpression(\'360*$F/$FEND\')")
rotate_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
rotate_btn.setTags({"script_callback": "hou.pwd().parm(\'ry\').setExpression(\'360*$F/$FEND\')", "script_callback_language": "python"})
ptg.addParmTemplate(rotate_btn)
# Freeze Rotete button
freeze_btn = hou.ButtonParmTemplate("freeze", "Freeze")
freeze_btn.setScriptCallback("hou.pwd().parm(\'ry\').deleteAllKeyframes()")
freeze_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
freeze_btn.setTags({"script_callback": "hou.pwd().parm(\'ry\').deleteAllKeyframes()", "script_callback_language": "python"})
ptg.addParmTemplate(freeze_btn)

newnode.setParmTemplateGroup(ptg)

newnode.parm("hdr_img").set(newnode.parm("hdr_img").menuItems()[0])




]]></script>
  </tool>

  <tool name="Rs displacement" label="Rs displacement" icon="SOP_mountain">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    n.parm("RS_objprop_rstess_enable").set(1)
    n.parm("RS_objprop_displace_enable").set(1)
    mat = hou.node(n.parm('shop_materialpath').eval())
    """
    if mat.type().name() == 'redshift_vopnet':
        disp = mat.createNode('Displacement')
        disp.setDetailHighFlag(True)
        out = mat.node('redshift_material1')        
        out.setInput(1,disp)
        
        disp.setPosition(out.position() + hou.Vector2(-2,2.5))
    """]]></script>
  </tool>

  <tool name="Import RS_Proxies" label="Import RS_Proxies" icon="PLASMA_App">
    <helpText><![CDATA["""imports and scales all proxies in $JOB/Cache/Redshift"""]]></helpText>
    <script scriptType="python"><![CDATA[# import all proxies from $JOB/Cache/redshift
import glob
subdir = "/Cache/Redshift/"
rsCache =  hou.expandString("$JOB")+subdir
proxies = glob.glob(rsCache + "*.rs")

obj = hou.node("/obj")
null = obj.createNode("null","Scale")
null.parm("scale").set(0.01)
null.parm("picking").set(0)
null.setDisplayFlag(0)
offset = 0

for proxy in proxies:
    print proxy
    filename = proxy.split("\\").pop()
    pName = filename.split(".")[0]
    pNode = null.createOutputNode("geo",pName) 
    pNode.setPosition(null.position() + hou.Vector2(offset,-1))
    offset += 2
    
    pNode.setSelected(1,1)
    hou.hscript('Redshift_objectSpareParameters')
    
    pNode.parm("RS_objprop_proxy_enable").set(1)
    pNode.parm("RS_objprop_proxy_file").set("$JOB" + subdir + filename)
    
    pSOP = pNode.createNode('redshift_proxySOP')
    pSOP.setDisplayFlag(1)
    pSOP.setRenderFlag(1)
    
    file = pNode.node("file1")
    file.destroy()
    
    
    
    
    ]]></script>
  </tool>

  <tool name="Add RS Prefix" label="Add RS Prefix" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    if not n.name().startswith("RS_"):        
        n.setName("RS_" + n.name(),1)
    else:
        n.setName(n.name()[3:])]]></script>
  </tool>

  <tool name="aces" label="ACES" icon="PLASMA_App">
    <helpText><![CDATA[""" Press Ctrl+U to swap lut and fix gamma
Works only in renderViewWindow"""]]></helpText>
    <script scriptType="python"><![CDATA[if hou.getenv("g")=="1":
    hou.hscript('colorsettings -g 2.2 -c')
    hou.putenv("g","2.2")
else:
    hou.hscript('colorsettings -g 1 -c')
    hou.putenv("g","1")
    
mega = hou.expandString('$HEXT').replace('\\','/')
hou.hscript('colorsettings -l "'+ mega +'/Assets/LUTS/Rec.709_for_ACEScg_Houdini.lut" -c')]]></script>
  </tool>

  <tool name="batchProxy" label="Batch Proxy" icon="hicon:/SVGIcons.index?SOP_filecache.svg">
    <script scriptType="python"><![CDATA[import subprocess

threads = 5

for n in hou.selectedNodes():
    if n.type().name() == 'Redshift_Proxy_Output' or n.type().name() == 'Redshift_ROP':
        hython = hou.getenv('HB')+'/hython'
        file = hou.hipFile.path()
        
        for i in range(0,threads):  
            sf = int(n.parm("f1").eval())
            cmd = 'hou.parm("' + n.path() + '/f1").deleteAllKeyframes();'
            cmd += 'hou.parm("' + n.path() + '/f2").deleteAllKeyframes();'
            cmd += 'hou.parm("' + n.path() + '/f3").deleteAllKeyframes();'
            
            cmd += 'hou.parm("' + n.path() + '/f1").set(' +str(sf+i)+ ');'
            cmd += 'hou.parm("' + n.path() + '/f3").set(' +str(threads)+ ');'
        
            cmd += 'hou.parm("' + n.path() + '/execute").pressButton()'
            #print cmd
            subprocess.Popen([hython,file,'-c',cmd])
            
]]></script>
  </tool>

  <tool name="AssetPrepare" label="AssetPrepare" icon="hicon:/SVGIcons.index?MISC_conductor.svg">
    <helpText><![CDATA["""Select File node of a loaded asset"""]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    t = n.createOutputNode('xform',"Maya_Scale")
    t.parm('scale').set(0.01)
    
    t = t.createOutputNode('xform',"Centered")
    t.parm("tx").setExpression("-$CEX")
    t.parm("ty").setExpression("-$CEY")
    t.parm("tz").setExpression("-$CEZ")
    
    t = t.createOutputNode('xform',"Grounded")
    t.parm("ty").setExpression(r'-bbox(opinputpath(".",0),D_YMIN)')
    
    t = t.createOutputNode('xform',"Scale")    
    t = t.createOutputNode("Rs_quickMat","Material")
    
    t.setDisplayFlag(1)    
    t.setRenderFlag(1)
    
    # Add Rs Prefix to parent
    p = n.parent()
    if not p.name().startswith("RS_"):        
        p.setName("RS_" + p.name(),1)
        
    t = t.createOutputNode("Redshift_Proxy_Output","ExportProxy")
    t.parm("RS_archive_file").set("$HIP/1.rs")
    hou.setFrame(1)
    
    # Create Tommy
    tommy = t.parent().createNode("testgeometry_tommy","ScaleTest")
    tommy.setTemplateFlag(1)
    tommy.parm("tx").set(1)
    tommy.setPosition(n.position() + hou.Vector2(3,0))
    
    
    ]]></script>
  </tool>

  <tool name="find_all_textures" label="Find All Textures" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
type = 'redshift::TextureSampler'

node_type = hou.nodeType(hou.vopNodeTypeCategory(),type)
tex_nodes = node_type.instances()

convert = 0
size_total = 0

for tex_node in tex_nodes:
    #print tex_node.name() 
    tex_path =  tex_node.parm("tex0").eval()
    if os.path.isfile(tex_path):
        tex_node.bypass(1)
        
        size = os.path.getsize(tex_path)*1e-6
        if size > 1000:            
            print tex_node.path()
            print tex_path
            print size
            tex_node.setColor(hou.Color(1,0,0))
       
        if size < 1000:
            tex_node.bypass(0)
            print tex_node.path()
            print tex_path
            print size
            size_total += size
            
        if convert:    
            tp = r"C:\ProgramData\Redshift\bin\redshiftTextureProcessor.exe"            
            tex_name = os.path.abspath(tex_path)            
            os.system(r"start " + tp + " \"" + tex_name + "\" -l")
            
print "TOTAL SIZE"
print size_total
        
        
            
            
            ]]></script>
  </tool>
</shelfDocument>
