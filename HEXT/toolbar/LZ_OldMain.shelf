<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ OldMain" label="LZ OldMain">
    <memberTool name="LZ Compare Nodes"/>
    <memberTool name="send to nuke"/>
    <memberTool name="lz_create_chopnet"/>
  </toolshelf>

  <tool name="LZ Compare Nodes" label="LZ Compare Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
parm_dicts = ()
    
for node in nodes:
    node_parms = {}
    parm_tuple = [(node.name(), node.parmTuples())]
    node_parms.update(parm_tuple)
    parm_dicts += (node_parms,)

a_parm_vals = []
b_parm_vals = []
parm_labels = []    
    
node = nodes[0]
for parm_tuple in parm_dicts[nodes.index(node)][node.name()]:
    for parm in parm_tuple:
            a_parm_vals.append(parm.evalAsString())
            parm_labels.append(parm.name())

node = nodes[1]            
for parm_tuple in parm_dicts[nodes.index(node)][node.name()]:
    for parm in parm_tuple:
            b_parm_vals.append(parm.evalAsString())

            
if a_parm_vals != b_parm_vals:
    message = "Changed parameters :" + '\n'
    for val in range(0, len(parm_labels) - 1):
        if a_parm_vals[val] != b_parm_vals[val]:
            message += parm_labels[val] + '\n'
            message += '\t' + nodes[0].name() +" = " + a_parm_vals[val] + '\n' 
            message += '\t' + nodes[1].name() +" = " + b_parm_vals[val] + '\n'
else:
    message = "nodes are the same"

print message






]]></script>
  </tool>

  <tool name="send to nuke" label="Send to Nuke" icon="hicon:/SVGIcons.index?BUTTONS_global.svg">
    <script scriptType="python"><![CDATA[ipr =  hou.ui.paneTabOfType(hou.paneTabType.IPRViewer,0);

import os
dir = hou.expandString("$HC/$HIPNAME/render") 
if not os.path.exists(dir):
    os.makedirs(dir)
dir += "/"

files = os.listdir(dir)
if len(files) > 0:
    increment = int(files[len(files)-1].split("_")[0]) + 1
else:
    increment = 1

name = str(increment).zfill(3)+"_screenshot.pic"


path = dir + name + ".exr"


ipr.saveFrame(path)
# copy dir to clipboard
import PySide.QtGui as qtg
app = qtg.QApplication.instance()
clipboard = app.clipboard()
clipboard.setText(path)


]]></script>
  </tool>

  <tool name="lz_create_chopnet" label="LZ Create Chopnet" icon="hicon:/SVGIcons.index?NETWORKS_chop.svg">
    <script scriptType="python"><![CDATA[if hou.selectedNodes() is not ():
    for node in hou.selectedNodes():
        if node.type().name()=='channel':
            chopnet = node.parent().createNode("chopnet")
            chopnet.setPosition(node.position() + hou.Vector2(2,0))
            
            geo = chopnet.createNode('geometry')
            geo.parm("soppath").set('`opinputpath("../../' + node.name() + '",0)`')
            geo.parm("method").setExpression('ch("../../' + node.name() + '/method")')
            
            #geo.parm("attribscope").set('`chs("../../' + node.name() + '/attscope")`')
            #geo.parm("renamescope").set('`chs("../../' + node.name() + '/chanscope")`')
            node.parm("attscope").set('`chs("../' + chopnet.name() + "/" + geo.name() + '/attribscope")`')
            node.parm("chanscope").set('`chs("../' + chopnet.name() + "/" + geo.name() + '/renamescope")`')
                        
            node.parm("attscope").lock(True)
            node.parm("chanscope").lock(True)
            
            out = geo.createOutputNode('null')
            
            node.parm('choppath').set("../" + chopnet.name() + "/" + out.name())
            
]]></script>
  </tool>
</shelfDocument>
