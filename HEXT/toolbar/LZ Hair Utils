<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ Hair Utils" label="LZ Hair Utils">
    <memberTool name="Tommy Bust"/>
    <memberTool name="LZ Create Parms Script"/>
  </toolshelf>

  <tool name="Tommy Bust" label="Tommy Bust" icon="MISC_generic">
    <toolMenuContext name="network">
      <contextOpType>Sop/testgeometry_tommy</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('polyfill'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_testgeometry_tommy1 (Sop/testgeometry_tommy)
set _obj_geo1_testgeometry_tommy1 = `run("opadd -e -n -v testgeometry_tommy testgeometry_tommy1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_testgeometry_tommy1
opparm $_obj_geo1_testgeometry_tommy1 switch_clothing ( off ) switch_textures ( off )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_testgeometry_tommy1
opexprlanguage -s hscript $_obj_geo1_testgeometry_tommy1
opuserdata -n '___Version___' -v '' $_obj_geo1_testgeometry_tommy1
opuserdata -n '___toolcount___' -v '1' $_obj_geo1_testgeometry_tommy1
opuserdata -n '___toolid___' -v 'sop_testgeometry_tommy' $_obj_geo1_testgeometry_tommy1
opset -p on $_obj_geo1_testgeometry_tommy1
opcf $arg1

# Node $_obj_geo1_transform1 (Sop/xform)
set _obj_geo1_transform1 = `run("opadd -e -n -v xform transform1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -3.1938054054054055` $_obj_geo1_transform1
opspareds '    parm {   name    "group"         baseparm        label   "Group"         export  none    bindselector everything "Transform Geometry"        "Select the geometry to transform and press Enter to complete. Middle mouse to select. Left mouse to select and drag."          0 1 0xffffffff 1 grouptype 0     }     parm {       name    "grouptype"     baseparm        label   "Group Type"    export  none     }     parm {   name    "xOrd"  baseparm        label   "Transform Order"       joinnext        export  none     }     parm {   name    "rOrd"  baseparm        label   "Rotate Order"  nolabel         export  none     }     parm {   name    "t"     baseparm        label   "Translate"     export  none     }     parm {   name    "r"     baseparm        label   "Rotate"        export  none     }     parm {   name    "s"     baseparm        label   "Scale"         export  none     }     parm {   name    "shear"         baseparm        label   "Shear"         export  none     }     parm {   name    "p"     baseparm        label   "Pivot"         export  none     }     parm {   name    "scale"         baseparm        label   "Uniform Scale"         export  none     }     parm {   name    "movecentroid"  baseparm        label   "Move Centroid to Origin"       export  none     }     parm {   name    "attribs"       baseparm        label   "Attributes"    export  none     }     parm {   name    "updatenmls"    baseparm        label   "Recompute Point Normals"       export  none     }     parm {   name    "updateaffectednmls"    baseparm        label   "Recompute Affected Normals"    export  none     }     parm {   name    "vlength"       baseparm        label   "Preserve Normal Length"        export  none     }     parm {   name    "invertxform"   baseparm        label   "Invert Transformation"         export  none     }     parm {   name    "center_pivot"  label   "Center Pivot"  type    button  default { "0" }         parmtag { "script_callback" "node = kwargs[\'node\'];node.parm(\'px\').setExpression(\'$CEX\');node.parm(\'py\').setExpression(\'$CEY\');node.parm(\'pz\').setExpression(\'$CEZ\')" }   parmtag { "script_callback_language" "python" }     } ' $_obj_geo1_transform1
chblockbegin
chadd -t 0 0 $_obj_geo1_transform1 ty
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '-bbox(opinputpath(".",0),D_YMIN)' $_obj_geo1_transform1/ty
chblockend
opparm -V 16.0.557 $_obj_geo1_transform1 t ( 0 ty 0 )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_transform1
opexprlanguage -s hscript $_obj_geo1_transform1
opset -p on $_obj_geo1_transform1
opcf $arg1

# Node $_obj_geo1_OUT_Tommy (Sop/null)
set _obj_geo1_OUT_Tommy = `run("opadd -e -n -v null OUT_Tommy")`
oplocate -x `$arg2 + 0` -y `$arg3 + -4.2388504504504496` $_obj_geo1_OUT_Tommy
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_OUT_Tommy
opexprlanguage -s hscript $_obj_geo1_OUT_Tommy
opset -p on $_obj_geo1_OUT_Tommy
opcf $arg1

# Node $_obj_geo1_clip1 (Sop/clip)
set _obj_geo1_clip1 = `run("opadd -e -n -v clip clip1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -0.75675675675675658` $_obj_geo1_clip1
opparm -V 16.0.557 $_obj_geo1_clip1 dist ( 1.3999999999999999 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_clip1
opexprlanguage -s hscript $_obj_geo1_clip1
opset -p on $_obj_geo1_clip1
opcf $arg1

# Node $_obj_geo1_delete1 (Sop/delete)
set _obj_geo1_delete1 = `run("opadd -e -n -v delete delete1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.6486486486486487` $_obj_geo1_delete1
chblockbegin
chadd -t 0 0 $_obj_geo1_delete1 rangeend
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$N' $_obj_geo1_delete1/rangeend
chblockend
opparm -V 16.0.557 $_obj_geo1_delete1 group ( body ) negate ( keep )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_delete1
opexprlanguage -s hscript $_obj_geo1_delete1
opset -p on $_obj_geo1_delete1
opcf $arg1

# Node $_obj_geo1_polyfill1 (Sop/polyfill)
set _obj_geo1_polyfill1 = `run("opadd -e -n -v polyfill polyfill1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -2.4010126126126128` $_obj_geo1_polyfill1
opparm -V 16.0.557 $_obj_geo1_polyfill1 fillmode ( none )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_polyfill1
opexprlanguage -s hscript $_obj_geo1_polyfill1
opset -p on $_obj_geo1_polyfill1

opcf $arg1
opcf $arg1
opwire -n $_obj_geo1_polyfill1 -0 $_obj_geo1_transform1
opcf $arg1
opwire -n $_obj_geo1_transform1 -0 $_obj_geo1_OUT_Tommy
opcf $arg1
opwire -n $_obj_geo1_testgeometry_tommy1 -0 $_obj_geo1_clip1
opcf $arg1
opwire -n $_obj_geo1_clip1 -0 $_obj_geo1_delete1
opcf $arg1
opwire -n $_obj_geo1_delete1 -0 $_obj_geo1_polyfill1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_OUT_Tommy
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_testgeometry_tommy1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="LZ Create Parms Script" label="LZ Create Parms Script" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[script = '\n'
for n in hou.selectedNodes():
    newline = n.inputs()[0].name() + '.createOutputNode("' + n.type().name() + '","' + n.name() + '")'
    script += '\n' + newline + '\n'
    for p in n.parms():
        if not p.isAtDefault():
            if type(p) is hou.Parm:
                pt = p.parmTemplate()
                pval = str(p.eval())
                if pt.dataType() == hou.parmData.String:                
                    pval = '"' + pval +  '"'     
                newline = n.name() + '.parm("' + p.name() + '").set(' + pval + ')'
                script += newline + '\n'
                 
print script]]></script>
  </tool>
</shelfDocument>
