<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ Side" label="LZ Side">
    <memberTool name="LZ fast Bricker"/>
    <memberTool name="freeze_parts"/>
    <memberTool name="buildFK"/>
    <memberTool name="Convert Mocap"/>
    <memberTool name="tool_1"/>
    <memberTool name="extract_world_transform_to_null"/>
    <memberTool name="bake anim"/>
    <memberTool name="Attach To Bones"/>
    <memberTool name="test tracery"/>
    <memberTool name="Test Radial Menu"/>
    <memberTool name="fix_rs_resample"/>
    <memberTool name="check vis sel nodes"/>
    <memberTool name="lz_add_vis_controll"/>
    <memberTool name="add deform"/>
    <memberTool name="replace obj/ to ../"/>
    <memberTool name="Test JSON"/>
    <memberTool name="Send To Substance"/>
  </toolshelf>

  <tool name="LZ fast Bricker" label="LZ fast Bricker" icon="hicon:/SVGIcons.index?SOP_divide.svg">
    <toolMenuContext name="network">
      <contextOpType>Sop/null</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribdelete'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_IN4 (Sop/null)
set _obj_Stone_building_v19_clean_up4_IN4 = `run("opadd -e -n -v null IN4")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_Stone_building_v19_clean_up4_IN4
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_IN4
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_IN4
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_IN4
opset -p on $_obj_Stone_building_v19_clean_up4_IN4
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_foreach_end16 (Sop/block_end)
set _obj_Stone_building_v19_clean_up4_foreach_end16 = `run("opadd -e -n -v block_end foreach_end16")`
oplocate -x `$arg2 + 0.0015999999999998238` -y `$arg3 + -5.5261999999999993` $_obj_Stone_building_v19_clean_up4_foreach_end16
opparm -V 16.0.557 $_obj_Stone_building_v19_clean_up4_foreach_end16 itermethod ( pieces ) method ( merge ) class ( primitive ) attrib ( class ) blockpath ( ../foreach_begin ) templatepath ( ../foreach_begin ) multithread ( on )
opcolor -c 0.75 0.40000000596046448 0 $_obj_Stone_building_v19_clean_up4_foreach_end16
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Stone_building_v19_clean_up4_foreach_end16
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_foreach_end16
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_foreach_end16
opset -p on $_obj_Stone_building_v19_clean_up4_foreach_end16
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_to_center (Sop/xform)
set _obj_Stone_building_v19_clean_up4_to_center = `run("opadd -e -n -v xform to_center")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.5174999999999983` $_obj_Stone_building_v19_clean_up4_to_center
chblockbegin
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_center tx
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '-$XMIN' $_obj_Stone_building_v19_clean_up4_to_center/tx
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_center ty
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '-$YMIN' $_obj_Stone_building_v19_clean_up4_to_center/ty
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_center tz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '-$ZMIN' $_obj_Stone_building_v19_clean_up4_to_center/tz
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_center px
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEX' $_obj_Stone_building_v19_clean_up4_to_center/px
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_center py
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEY' $_obj_Stone_building_v19_clean_up4_to_center/py
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_center pz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEZ' $_obj_Stone_building_v19_clean_up4_to_center/pz
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_to_center
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_to_center
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_to_center
opset -p on $_obj_Stone_building_v19_clean_up4_to_center
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_foreach_begin (Sop/block_begin)
set _obj_Stone_building_v19_clean_up4_foreach_begin = `run("opadd -e -n -v block_begin foreach_begin")`
oplocate -x `$arg2 + 0.0015999999999998238` -y `$arg3 + -3.0022999999999982` $_obj_Stone_building_v19_clean_up4_foreach_begin
opparm -V 16.0.557 $_obj_Stone_building_v19_clean_up4_foreach_begin method ( piece ) blockpath ( ../foreach_end16 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_Stone_building_v19_clean_up4_foreach_begin
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Stone_building_v19_clean_up4_foreach_begin
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_foreach_begin
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_foreach_begin
opset -p on $_obj_Stone_building_v19_clean_up4_foreach_begin
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_BBOX3 (Sop/null)
set _obj_Stone_building_v19_clean_up4_BBOX3 = `run("opadd -e -n -v null BBOX3")`
oplocate -x `$arg2 + 0` -y `$arg3 + -3.8048000000000002` $_obj_Stone_building_v19_clean_up4_BBOX3
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_BBOX3
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_BBOX3
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_BBOX3
opset -p on $_obj_Stone_building_v19_clean_up4_BBOX3
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_connectivity (Sop/connectivity)
set _obj_Stone_building_v19_clean_up4_connectivity = `run("opadd -e -n -v connectivity connectivity")`
oplocate -x `$arg2 + 0` -y `$arg3 + -0.79520000000000124` $_obj_Stone_building_v19_clean_up4_connectivity
opparm -V 16.0.557 $_obj_Stone_building_v19_clean_up4_connectivity connecttype ( prim )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_connectivity
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_connectivity
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_connectivity
opset -p on $_obj_Stone_building_v19_clean_up4_connectivity
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_cbegin (Sop/compile_begin)
set _obj_Stone_building_v19_clean_up4_cbegin = `run("opadd -e -n -v compile_begin cbegin")`
oplocate -x `$arg2 + 0.0015999999999998238` -y `$arg3 + -2.1821999999999981` $_obj_Stone_building_v19_clean_up4_cbegin
opparm -V 16.0.557 $_obj_Stone_building_v19_clean_up4_cbegin blockpath ( ../compile_end10 )
opcolor -c 0.75 0.75 0 $_obj_Stone_building_v19_clean_up4_cbegin
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Stone_building_v19_clean_up4_cbegin
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_cbegin
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_cbegin
opset -p on $_obj_Stone_building_v19_clean_up4_cbegin
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_compile_end10 (Sop/compile_end)
set _obj_Stone_building_v19_clean_up4_compile_end10 = `run("opadd -e -n -v compile_end compile_end10")`
oplocate -x `$arg2 + 0.0015999999999998238` -y `$arg3 + -6.4571000000000005` $_obj_Stone_building_v19_clean_up4_compile_end10
opcolor -c 0.75 0.75 0 $_obj_Stone_building_v19_clean_up4_compile_end10
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_Stone_building_v19_clean_up4_compile_end10
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_compile_end10
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_compile_end10
opset -p on $_obj_Stone_building_v19_clean_up4_compile_end10
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_divide12 (Sop/divide)
set _obj_Stone_building_v19_clean_up4_divide12 = `run("opadd -e -n -v divide divide12")`
oplocate -x `$arg2 + 0` -y `$arg3 + -4.7515000000000001` $_obj_Stone_building_v19_clean_up4_divide12
opspareds '    parm {   name    "group"         baseparm        label   "Group"         export  none    bindselector prims "Divide Polygons"        "Select the polygons to divide and press Enter to complete."            0 1 0x00000001 0 "" 0     }     parm {      name    "convex"        baseparm        label   "Convex Polygons"       export  all     }     parm {    name    "usemaxsides"   baseparm        label   "Maximum Edges"         joinnext        export  none     }     parm {   name    "numsides"      baseparm        label   " "     export  none     }     parm {   name    "planar"        baseparm        label   "Triangulate Non-Planar"        joinnext        export  none     }     parm {   name    "plantol"       baseparm        label   " "     export  none     }     parm {   name    "noslivers"     baseparm        label   "Don\'t Generate Slivers"       export  none     }     parm {   name    "avoidsmallangles"      baseparm        label   "Avoid Small Angles"    export  none     }     parm {   name    "smooth"        baseparm        label   "Smooth Polygons"       export  all     }     parm {    name    "weight"        baseparm        label   "Weight"        export  none     }     parm {   name    "divs"  baseparm        label   "Divisions"     export  none     }     parm {   name    "brick"         baseparm        label   "Bricker Polygons"      export  none     }     parm {   name    "size"  baseparm        label   "Size"  export  none     }     parm {   name    "offset"        baseparm        label   "Offset"        export  none     }     parm {   name    "angle"         baseparm        label   "Angle"         export  none     }     parm {   name    "fixsharededges"        baseparm        label   "Bricker Shared Edges"  export  none     }     parm {   name    "removesh"      baseparm        label   "Remove Shared Edges"   export  none     }     parm {   name    "dual"  baseparm        label   "Compute Dual"  export  none     }     parm {   name    "dualattribstoswap"     baseparm        label   "Attributes to Swap"    export  none     }     parm {   name    "spare_input0"  label   "Spare Input 0"         type    oppath  default { "" }  help    "Refer to this in expressions as -1, such as: npoint(-1)"       parmtag { "opfilter" "!!SOP!!" }        parmtag { "oprelative" "." }     }     parm {   name    "spare_input1"  label   "Spare Input 1"         type    oppath  default { "" }  help    "Refer to this in expressions as -2, such as: npoint(-2)"       parmtag { "opfilter" "!!SOP!!" }        parmtag { "oprelative" "." }     } ' $_obj_Stone_building_v19_clean_up4_divide12
chblockbegin
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_divide12 sizey
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("sizex")' $_obj_Stone_building_v19_clean_up4_divide12/sizey
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_divide12 sizez
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("sizex")' $_obj_Stone_building_v19_clean_up4_divide12/sizez
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_divide12 offsetx
chkey -t 0 -v -0.45000000000000001 -m 0 -a 0 -A 0 -T a  -F '-bbox(-1,D_XMIN)' $_obj_Stone_building_v19_clean_up4_divide12/offsetx
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_divide12 offsety
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '-bbox(-1,D_YMIN)' $_obj_Stone_building_v19_clean_up4_divide12/offsety
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_divide12 offsetz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '-bbox(-1,D_ZMIN)' $_obj_Stone_building_v19_clean_up4_divide12/offsetz
chblockend
opparm -V 16.0.557 $_obj_Stone_building_v19_clean_up4_divide12 brick ( on ) size ( 0.029999999999999999 sizey sizez ) offset ( offsetx offsety offsetz ) spare_input0 ( /obj/Stone_building_v19_clean_up4/BBOX3 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_divide12
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_divide12
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_divide12
opset -p on $_obj_Stone_building_v19_clean_up4_divide12
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_to_rest (Sop/xform)
set _obj_Stone_building_v19_clean_up4_to_rest = `run("opadd -e -n -v xform to_rest")`
oplocate -x `$arg2 + 0` -y `$arg3 + -7.3249999999999993` $_obj_Stone_building_v19_clean_up4_to_rest
opspareds '    parm {   name    "group"         baseparm        label   "Group"         export  none    bindselector everything "Transform Geometry"        "Select the geometry to transform and press Enter to complete. Middle mouse to select. Left mouse to select and drag."          0 1 0xffffffff 1 grouptype 0     }     parm {       name    "grouptype"     baseparm        label   "Group Type"    export  none     }     parm {   name    "xOrd"  baseparm        label   "Transform Order"       joinnext        export  none     }     parm {   name    "rOrd"  baseparm        label   "Rotate Order"  nolabel         export  none     }     parm {   name    "t"     baseparm        label   "Translate"     export  none     }     parm {   name    "r"     baseparm        label   "Rotate"        export  none     }     parm {   name    "s"     baseparm        label   "Scale"         export  none     }     parm {   name    "shear"         baseparm        label   "Shear"         export  none     }     parm {   name    "p"     baseparm        label   "Pivot"         export  none     }     parm {   name    "scale"         baseparm        label   "Uniform Scale"         export  none     }     parm {   name    "movecentroid"  baseparm        label   "Move Centroid to Origin"       export  none     }     parm {   name    "attribs"       baseparm        label   "Attributes"    export  none     }     parm {   name    "updatenmls"    baseparm        label   "Recompute Point Normals"       export  none     }     parm {   name    "updateaffectednmls"    baseparm        label   "Recompute Affected Normals"    export  none     }     parm {   name    "vlength"       baseparm        label   "Preserve Normal Length"        export  none     }     parm {   name    "invertxform"   baseparm        label   "Invert Transformation"         export  none     }     parm {   name    "spare_input0"  label   "Spare Input 0"         type    oppath  default { "" }  help    "Refer to this in expressions as -1, such as: npoint(-1)"       parmtag { "opfilter" "!!SOP!!" }        parmtag { "oprelative" "." }     } ' $_obj_Stone_building_v19_clean_up4_to_rest
chblockbegin
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_rest tx
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'bbox(-1,D_XMIN)' $_obj_Stone_building_v19_clean_up4_to_rest/tx
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_rest ty
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'bbox(-1,D_YMIN)' $_obj_Stone_building_v19_clean_up4_to_rest/ty
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_rest tz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'bbox(-1,D_ZMIN)' $_obj_Stone_building_v19_clean_up4_to_rest/tz
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_rest px
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEX' $_obj_Stone_building_v19_clean_up4_to_rest/px
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_rest py
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEY' $_obj_Stone_building_v19_clean_up4_to_rest/py
chadd -t 0 0 $_obj_Stone_building_v19_clean_up4_to_rest pz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEZ' $_obj_Stone_building_v19_clean_up4_to_rest/pz
chblockend
opparm -V 16.0.557 $_obj_Stone_building_v19_clean_up4_to_rest t ( tx ty tz ) p ( px py pz ) spare_input0 ( /obj/Stone_building_v19_clean_up4/IN4 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_to_rest
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_to_rest
opuserdata -n '___Version___' -v '16.0.557' $_obj_Stone_building_v19_clean_up4_to_rest
opset -p on $_obj_Stone_building_v19_clean_up4_to_rest
opcf $arg1

# Node $_obj_Stone_building_v19_clean_up4_delete_class (Sop/attribdelete)
set _obj_Stone_building_v19_clean_up4_delete_class = `run("opadd -e -n -v attribdelete delete_class")`
oplocate -x `$arg2 + 0` -y `$arg3 + -8.1160999999999994` $_obj_Stone_building_v19_clean_up4_delete_class
opparm $_obj_Stone_building_v19_clean_up4_delete_class primdel ( class )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_Stone_building_v19_clean_up4_delete_class
opexprlanguage -s hscript $_obj_Stone_building_v19_clean_up4_delete_class
opuserdata -n '___Version___' -v '' $_obj_Stone_building_v19_clean_up4_delete_class
opset -p on $_obj_Stone_building_v19_clean_up4_delete_class

opcf $arg1
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_divide12 -0 $_obj_Stone_building_v19_clean_up4_foreach_end16
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_connectivity -0 $_obj_Stone_building_v19_clean_up4_to_center
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_cbegin -0 $_obj_Stone_building_v19_clean_up4_foreach_begin
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_foreach_begin -0 $_obj_Stone_building_v19_clean_up4_BBOX3
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_IN4 -0 $_obj_Stone_building_v19_clean_up4_connectivity
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_to_center -0 $_obj_Stone_building_v19_clean_up4_cbegin
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_foreach_end16 -0 $_obj_Stone_building_v19_clean_up4_compile_end10
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_BBOX3 -0 $_obj_Stone_building_v19_clean_up4_divide12
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_compile_end10 -0 $_obj_Stone_building_v19_clean_up4_to_rest
opcf $arg1
opwire -n $_obj_Stone_building_v19_clean_up4_to_rest -0 $_obj_Stone_building_v19_clean_up4_delete_class

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_Stone_building_v19_clean_up4_delete_class
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_Stone_building_v19_clean_up4_IN4
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="freeze_parts" label="Freeze Parts" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
sv = toolutils.sceneViewer()
s = sv.selectGeometry()
ss =  s.mergedSelectionString()

if hou.selectedNodes() is not ():
    for node in hou.selectedNodes():
        blast = node.createOutputNode('blast')
        
        blast.parm('group').set(ss)
        blast.parm('negate').set(True)
        
        null = blast.createOutputNode('null')
        null.setDisplayFlag(True)
        null.setHardLocked(True)
        
        blast.destroy()
        null.setInput(0,None)
        null.setPosition(node.position() + hou.Vector2(2,0))
        ]]></script>
  </tool>

  <tool name="buildFK" label="buildFK" icon="hicon:/SVGIcons.index?OBJ_null.svg">
    <script scriptType="python"><![CDATA[def techrig_userInput_startBoneEndBone():
    import toolutils
    sViewer = toolutils.sceneViewer()
    startBone = sViewer.selectObjects('Select Start bone, press enter to confirm',allowed_types = ("bone",),allow_multisel =False)

    if startBone == ():
        hou.ui.displayMessage('Start bone Not Selected',severity = hou.severityType.Error)
        return (None,None)
        
    # deselect   
    startBone[0].setSelected(0,True)
    endBone = sViewer.selectObjects('Select end Bone, press enter to confirm',allowed_types = ("bone",),allow_multisel =False)
    if endBone == ():
        hou.ui.displayMessage('End bone Not Selected',severity = hou.severityType.Error)
        return (None,None)
    endBone[0].setSelected(0,True)
    
    if not techrig_findChildInHierarchy(startBone[0],endBone[0]):
        hou.ui.displayMessage('Bones not in the same hierarchy',severity = hou.severityType.Error)
        return (None,None)
        
    return (startBone[0],endBone[0])
  
def techrig_findChildInHierarchy(parent,child):
    done = 0
    currNode = child
    while not done:
        if currNode == parent:
            return 1
        elif   currNode.inputs() != ():
            currNode = currNode.inputs()[0]
        else:
            done  =1
    return 0        
    
    
def techrig_buildFKControll(bone):
    print "called build fk"
    parentNode = bone.parent()
    
    fkControl = parentNode.createNode('null',bone.name() + '_FKControl')
    
    #fkControl.setFirstInput(bone)
    #fkControl.parm('keeppos').set(1)
    fkControl.parm('rOrd').setExpression('ch("' + fkControl.relativePathTo(bone) + '/rOrd")')
    
    fkControl.setPreTransform(bone.preTransform())
    
    if bone.inputs() != ():
        parent = bone.inputs()[0]
        fkControl.setFirstInput(parent)
        if parent.type().name() == 'bone':
            fkControl.movePreTransformIntoParmTransform()
            fkControl.parm('tz').set(fkControl.parm('tz').eval() - parent.parm('length').eval())
            fkControl.moveParmTransformIntoPreTransform()
    else:
        fkControl.setFirstInput(None)
    
    bone.parm('rx').setExpression('ch("' + bone.relativePathTo(fkControl) + '/rx")')     
    bone.parm('ry').setExpression('ch("' + bone.relativePathTo(fkControl) + '/ry")')  
    bone.parm('rz').setExpression('ch("' + bone.relativePathTo(fkControl) + '/rz")')  
    #Lock Selection
    bone.parm('picking').set(0)
    #change controll type vis
    fkControl.parm('controltype').set(1)
    #lockParms
    fkControl.parm('tx').lock(1)
    fkControl.parm('ty').lock(1)
    fkControl.parm('tz').lock(1)    
    fkControl.parm('sx').lock(1)
    fkControl.parm('sy').lock(1)
    fkControl.parm('sz').lock(1)
    fkControl.parm('px').lock(1)
    fkControl.parm('py').lock(1)
    fkControl.parm('pz').lock(1)
    #move to good position
    fkControl.setPosition(bone.position() + hou.Vector2(2.5,0))
    return fkControl

    
#techrig_userInput_startBoneEndBone()

bones = hou.selectedNodes()    
for bone in bones:
    techrig_buildFKControll(bone)    
    ]]></script>
  </tool>

  <tool name="Convert Mocap" label="Convert Mocap" icon="hicon:/SVGIcons.index?SHELF_motion_capture.svg">
    <script scriptType="python"><![CDATA[import subprocess
start_dir = (hou.expandString('$HMEGA') + '\Assets\Mocap\BVH').replace("\\",'/')
title='Select BVH files'
multiple_select=True

files =  hou.ui.selectFile(start_directory=start_dir,title=title,pattern='*.bvh',multiple_select=multiple_select)
files = files.split(" ; ")

for file in files:
    path = hou.expandString('$HB/mcbiovision')
    args = file.replace("/","\\")
    process =  subprocess.Popen([path,args])  
    stdoutdata, stderrdata = process.communicate()  
    
for file in files:      
    hou.hscript('source ' + file.replace('.bvh','.cmd'))

#import time
#time.sleep(10) 

for file in files:    
    node_name = file.replace(':','_').replace('/','_').replace('.bvh','')
    mocap = hou.node('/obj/' + node_name) 

    mocap.parm('scale').set(0.01)
    mocap.setName('Mocap',True)
    
    chop_file = mocap.node('mocap').node(node_name)
    chop_file.parm('file').set( file.replace('.bvh','.bclip'))
        
        
        
        ]]></script>
  </tool>

  <tool name="tool_1" label="New Tool" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

for node in nodes:
    if node.type().name() == 'bone':
        node.setPreTransform(node.localTransform()) ]]></script>
  </tool>

  <tool name="extract_world_transform_to_null" label="Extract_world_transform_to_null" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()


for node in nodes:
    print node.worldTransform()
    t = node.parent().createNode('null',node.name() + '_transfrom')
    t.setPosition(node.position() - hou.Vector2(0,1))
    
    t.setParmTransform(node.worldTransform())
    
    ]]></script>
  </tool>

  <tool name="bake anim" label="Bake Sim Anim" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[step = 1
step = int( hou.ui.readInput("select step size",default_choice=1, initial_contents='1')[1])

for n in hou.selectedNodes():
    timeshift = n.createOutputNode('timeshift')
    timeshift.parm('frame').deleteAllKeyframes()
    timeshift.parm('frame').set(hou.expandString('$FSTART'))

    wr = timeshift.createOutputNode('attribwrangle')
    wr.parm("snippet").set('@P = 0;\n')

    tr = wr.createOutputNode('xform')
    
#def test():
    #n = hou.node('/obj/sim/baseL')
    #tr = hou.node('/obj/sim/transform3')
    
    start_frame = int(hou.expandString('$FSTART'))
    end_frame = int(hou.expandString('$FEND'))
    
    for i in range(start_frame,end_frame):
            if i%step == 0:
                    hou.setFrame(i)
                    #print i
    
                    Time = int(hou.expandString('$F'))
                    g = n.geometryAtFrame(Time)
                    prim = g.prims()[0]
                    t= prim.transform();
                    rot = t.extractRotates()
                    point = g.points()[0]
                    pos = point.position()
    
                    tr.parm("rx").setKeyframe(hou.Keyframe(rot.x()))
                    tr.parm("ry").setKeyframe(hou.Keyframe(rot.y()))
                    tr.parm("rz").setKeyframe(hou.Keyframe(rot.z()))
    
                    tr.parm("tx").setKeyframe(hou.Keyframe(pos.x()))
                    tr.parm("ty").setKeyframe(hou.Keyframe(pos.y()))
                    tr.parm("tz").setKeyframe(hou.Keyframe(pos.z()))]]></script>
  </tool>

  <tool name="Attach To Bones" label="Attach To Bones" icon="MISC_generic">
    <toolMenuContext name="network">
      <contextOpType>Sop/null</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_L30N1D_static_geo_in (Sop/null)
set _obj_L30N1D_static_geo_in = `run("opadd -e -n -v null in")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_L30N1D_static_geo_in
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_L30N1D_static_geo_in
opexprlanguage -s hscript $_obj_L30N1D_static_geo_in
opuserdata -n '___Version___' -v '16.0.557' $_obj_L30N1D_static_geo_in
opset -p on $_obj_L30N1D_static_geo_in
opcf $arg1

# Node $_obj_L30N1D_static_geo_leave_only_points (Sop/add)
set _obj_L30N1D_static_geo_leave_only_points = `run("opadd -e -n -v add leave_only_points")`
oplocate -x `$arg2 + -4.6173999999999999` -y `$arg3 + -1.6457839999999999` $_obj_L30N1D_static_geo_leave_only_points
opparm $_obj_L30N1D_static_geo_leave_only_points  points ( 1 ) prims ( 1 )
opparm -V 16.0.557 $_obj_L30N1D_static_geo_leave_only_points keep ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_L30N1D_static_geo_leave_only_points
opexprlanguage -s hscript $_obj_L30N1D_static_geo_leave_only_points
opuserdata -n '___Version___' -v '16.0.557' $_obj_L30N1D_static_geo_leave_only_points
opset -p on $_obj_L30N1D_static_geo_leave_only_points
opcf $arg1

# Node $_obj_L30N1D_static_geo_del_all_attribs (Sop/attribdelete)
set _obj_L30N1D_static_geo_del_all_attribs = `run("opadd -e -n -v attribdelete del_all_attribs")`
oplocate -x `$arg2 + -4.6208499999999999` -y `$arg3 + -2.3245139999999997` $_obj_L30N1D_static_geo_del_all_attribs
opparm $_obj_L30N1D_static_geo_del_all_attribs ptdel ( '* ^rt ^name' ) vtxdel ( * ) primdel ( * ) dtldel ( * )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_L30N1D_static_geo_del_all_attribs
opexprlanguage -s hscript $_obj_L30N1D_static_geo_del_all_attribs
opuserdata -n '___Version___' -v '' $_obj_L30N1D_static_geo_del_all_attribs
opset -p on $_obj_L30N1D_static_geo_del_all_attribs
opcf $arg1

# Node $_obj_L30N1D_static_geo_store_rest_matricies (Sop/filecache)
set _obj_L30N1D_static_geo_store_rest_matricies = `run("opadd -e -n -v filecache store_rest_matricies")`
oplocate -x `$arg2 + -4.6173999999999999` -y `$arg3 + -3.0511939999999997` $_obj_L30N1D_static_geo_store_rest_matricies
opspareds '    parm {   name    "loadfromdisk"  baseparm        label   "Load from Disk     "   joinnext        export  none     }     parm {   name    "reload"        baseparm        label   "Reload Geometry"       export  none     }     parm {   name    "filemode"      baseparm        label   "File Mode"     export  none     }     parm {   name    "version"       label   "Version"       type    integer         default { "0" }         range   { 0! 20 }     }     parm {      name    "note0"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 0 }"     }     parm {     name    "note1"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 1 }"     }     parm {     name    "note2"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 2 }"     }     parm {     name    "note3"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 3 }"     }     parm {     name    "note4"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 4 }"     }     parm {     name    "note5"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 5 }"     }     parm {     name    "note6"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 6 }"     }     parm {     name    "note7"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 7 }"     }     parm {     name    "note8"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 8 }"     }     parm {     name    "note9"         label   "Note"  type    string  default { "" }  hidewhen        "{ version != 9 }"     }     parm {     name    "note10"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 10 }"     }     parm {    name    "note11"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 11 }"     }     parm {    name    "note12"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 12 }"     }     parm {    name    "note13"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 13 }"     }     parm {    name    "note14"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 14 }"     }     parm {    name    "note15"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 15 }"     }     parm {    name    "note16"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 16 }"     }     parm {    name    "note17"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 17 }"     }     parm {    name    "note18"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 18 }"     }     parm {    name    "note19"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 19 }"     }     parm {    name    "note20"        label   "Note"  type    string  default { "" }  hidewhen        "{ version != 20 }"     }     parm {    name    "file"  baseparm        label   "Geometry File"         export  none     }     parm {   name    "open_cache_folder"     label   "Open Cache Folder"     type    button  default { "0" }         parmtag { "script_callback" "import subprocess;subprocess.Popen(\'explorer \\"\' + hou.expandString(\'$HC\') + \'\\"\');print hou.expandString(\'$HC\')" }      parmtag { "script_callback_language" "python" }     }     group {       name    "folder2"       label   "Save to File"          parm {      name        "execute"           baseparm        label       "Save to Disk"      joinnext        export      none    }       parm {      name        "executebackground"         baseparm        label       "Save to Disk in Background"        joinnext        export      none    }       parm {      name        "renderdialog"      baseparm        label       "Controls..."       export      none    }       parm {      name        "trange"            baseparm        label       "Valid Frame Range"         export      none    }       parm {      name        "f"         baseparm        label       "Start/End/Inc"             export      none    }       parm {      name        "substeps"          baseparm        label       "Substeps"          export      none    }       parm {      name        "take"      baseparm        label       "Render With Take"          export      none    }       parm {      name        "xformtype"         baseparm        label       "Transform"         export      none    }       parm {      name        "mkpath"            baseparm        label       "Create Intermediate Directories"           export      none    }       parm {      name        "initsim"           baseparm        label       "Initialize Simulation OPs"         export      none    }       parm {      name        "alfprogress"       baseparm        label       "Alfred Style Progress"             export      none    }       parm {      name        "saveretry"         baseparm        label       "Save Retries"      export      none    }       parm {      name        "savebackground"            baseparm        label       "Save in Background"        export      none    }       parm {      name        "tprerender"        baseparm        label       "Pre-Render Script"         nolabel         joinnext        export      none    }       parm {      name        "prerender"         baseparm        label       "Pre-Render Script"         joinnext        export      none    }       parm {      name        "lprerender"        baseparm        label       "Pre-Render Script Language"        nolabel         export      none    }       parm {      name        "tpreframe"         baseparm        label       "Pre-Frame Script"          nolabel         joinnext        export      none    }       parm {      name        "preframe"          baseparm        label       "Pre-Frame Script"          joinnext        export      none    }       parm {      name        "lpreframe"         baseparm        label       "Pre-Frame Script Language"         nolabel         export      none    }       parm {      name        "tpostframe"        baseparm        label       "Post-Frame Script"         nolabel         joinnext        export      none    }       parm {      name        "postframe"         baseparm        label       "Post-Frame Script"         joinnext        export      none    }       parm {      name        "lpostframe"        baseparm        label       "Post-Frame Script Language"        nolabel         export      none    }       parm {      name        "tpostrender"       baseparm        label       "Post-Render Script"        nolabel         joinnext        export      none    }       parm {      name        "postrender"        baseparm        label       "Post-Render Script"        joinnext        export      none    }       parm {      name        "lpostrender"       baseparm        label       "Post-Render Script Language"       nolabel         export      none    }     }      group {    name    "folder2_1"     label   "Save Filter"   parm {      name        "deleteattributes"          baseparm        label       "Delete Attributes"         export      none    }       parm {      name        "deletegroups"      baseparm        label       "Delete Groups"             export      none    }       multiparm {         name        "numcasts"          label       "Number of Casts"           baseparm        default     0           parmtag     { "autoscope" "0000000000000000" }          parm {              name    "class#"                baseparm                label   "Class"                 export  none        }       parm {              name    "attribs#"              baseparm                label   "Attributes"            export  none        }       parm {              name    "precision#"            baseparm                label   "Precision"             export  none        }   }      }      group {   name    "folder2_2"     label   "Load from File"        parm {      name        "missingframe"      baseparm        label       "Missing Frame"             export      none    }       parm {      name        "loadtype"          baseparm        label       "Load"      export      none    }       parm {      name        "packedviewedit"            baseparm        label       "Display Packed As"         export      none    }       parm {      name        "viewportlod"       baseparm        label       "Display As"        export      none    }       parm {      name        "packexpanded"      baseparm        label       "Pack Using Expanded/Absolute File Path"            export      none    }       parm {      name        "delayload"         baseparm        label       "Delay Load Geometry"       export      none    }       parm {      name        "cachesize"         baseparm        label       "Cache Frames"      export      none    }       parm {      name        "prefetch"          baseparm        label       "Pre-fetch Geometry"        export      none    }     }  ' $_obj_L30N1D_static_geo_store_rest_matricies
opparm $_obj_L30N1D_static_geo_store_rest_matricies  numcasts ( 0 )
chblockbegin
chadd -t 0 0 $_obj_L30N1D_static_geo_store_rest_matricies f1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FSTART' $_obj_L30N1D_static_geo_store_rest_matricies/f1
chadd -t 0 0 $_obj_L30N1D_static_geo_store_rest_matricies f2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_obj_L30N1D_static_geo_store_rest_matricies/f2
chblockend
opparm $_obj_L30N1D_static_geo_store_rest_matricies loadfromdisk ( on ) file ( '$HC/$HIPNAME/$OS/v_`chs("version")`/v_`chs("version")`.bgeo.sc' ) trange ( off ) version ( -1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_L30N1D_static_geo_store_rest_matricies
opexprlanguage -s hscript $_obj_L30N1D_static_geo_store_rest_matricies
opuserdata -n '___Version___' -v '' $_obj_L30N1D_static_geo_store_rest_matricies
opset -p on $_obj_L30N1D_static_geo_store_rest_matricies
opcf $arg1

# Node $_obj_L30N1D_static_geo_store_set_matricies (Sop/attribwrangle)
set _obj_L30N1D_static_geo_store_set_matricies = `run("opadd -e -n -v attribwrangle store_set_matricies")`
oplocate -x `$arg2 + -4.6204000000000001` -y `$arg3 + -0.89420399999999989` $_obj_L30N1D_static_geo_store_set_matricies
opparm $_obj_L30N1D_static_geo_store_set_matricies  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_L30N1D_static_geo_store_set_matricies snippet ( 'matrix m = optransform(\'../../\' + prim(0,"piece",@ptnum));\n\n4@rt = invert(m);\n@P = 0;\n' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_L30N1D_static_geo_store_set_matricies
opexprlanguage -s hscript $_obj_L30N1D_static_geo_store_set_matricies
opuserdata -n '___Version___' -v '' $_obj_L30N1D_static_geo_store_set_matricies
opset -p on $_obj_L30N1D_static_geo_store_set_matricies
opcf $arg1

# Node $_obj_L30N1D_static_geo_apply_transformations (Sop/attribwrangle)
set _obj_L30N1D_static_geo_apply_transformations = `run("opadd -e -n -v attribwrangle apply_transformations")`
oplocate -x `$arg2 + 0.28464099999999992` -y `$arg3 + -3.9707439999999998` $_obj_L30N1D_static_geo_apply_transformations
opparm $_obj_L30N1D_static_geo_apply_transformations  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_L30N1D_static_geo_apply_transformations snippet ( 'string bone_path = \'../../\' + prim(0,"piece",@ptnum);\n\nmatrix wt = optransform(bone_path);\n4@test = wt;\n\nmatrix3 lt = primintrinsic(0,"transform",@ptnum);\nmatrix rt = 4@opinput1_rt; \n\n\nsetprimintrinsic(0,"transform",@ptnum,lt*(matrix3)rt*(matrix3)wt);\n@P  = @P*rt*wt;\n\n' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_L30N1D_static_geo_apply_transformations
opexprlanguage -s hscript $_obj_L30N1D_static_geo_apply_transformations
opuserdata -n '___Version___' -v '' $_obj_L30N1D_static_geo_apply_transformations
opset -p on $_obj_L30N1D_static_geo_apply_transformations

opcf $arg1
opwire -n $_obj_L30N1D_static_geo_merge_Rigid_geo -0 $_obj_L30N1D_static_geo_in
opcf $arg1
opwire -n $_obj_L30N1D_static_geo_store_set_matricies -0 $_obj_L30N1D_static_geo_leave_only_points
opcf $arg1
opwire -n $_obj_L30N1D_static_geo_leave_only_points -0 $_obj_L30N1D_static_geo_del_all_attribs
opcf $arg1
opwire -n $_obj_L30N1D_static_geo_del_all_attribs -0 $_obj_L30N1D_static_geo_store_rest_matricies
opcf $arg1
opwire -n $_obj_L30N1D_static_geo_in -0 $_obj_L30N1D_static_geo_store_set_matricies
opcf $arg1
opwire -n $_obj_L30N1D_static_geo_in -0 $_obj_L30N1D_static_geo_apply_transformations
opwire -n $_obj_L30N1D_static_geo_store_rest_matricies -1 $_obj_L30N1D_static_geo_apply_transformations

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_L30N1D_static_geo_apply_transformations
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_L30N1D_static_geo_in
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="test tracery" label="test tracery" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import tracery
from tracery.modifiers import base_english

rules = {
    'origin': '#hello.capitalize#, #location#!',
    'hello': ['hello', 'greetings', 'howdy', 'hey'],
    'location': ['world', 'solar system', 'galaxy', 'universe']
}

grammar = tracery.Grammar(rules)
grammar.add_modifiers(base_english)
#print grammar.flatten("#origin#")


import json
rules = json.load(open('D:/data.txt'))

grammar = tracery.Grammar(rules)
print grammar.flatten("#origin#")
print ''

#with open('D:/data.txt', 'w') as outfile:
#    json.dump(rules, outfile)]]></script>
  </tool>

  <tool name="Test Radial Menu" label="Test Radial Menu" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
sv = toolutils.sceneViewer()
sv.displayRadialMenu("LZ Main Menu")]]></script>
  </tool>

  <tool name="replace obj/ to ../" label="replace obj/ to ../" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[def fixAbsPaths(n):
    parms = n.parms()
    for p in parms:
        pt = p.parmTemplate()
        if pt.type() == hou.parmTemplateType.String :
            if pt.stringType() == hou.stringParmType.NodeReference :
                if p.evalAsString() != '' :
                    if p.evalAsString().startswith('/obj'):
                        p.set(p.evalAsString().replace('/obj','..'))

for n in hou.selectedNodes():
    fixAbsPaths(n)
    if n.type().name() == 'chopnet':
        for child in n.children():
            fixAbsPaths(child)]]></script>
  </tool>

  <tool name="add deform" label="Add guide Deform" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    groom = hou.node(n.parm('sourcegroomobject').eval())
    
    deform = n.parent().createNode('guidedeform',groom.name() + '_deform')
    deform.parm('animskin').set('/obj/HASDRUBAL_SKIN/ANIM_SKIN/') 
    deform.parm('sourcegroomobject').set(groom.path())
    deform.setPosition(n.position() + hou.Vector2(-2.5,0))
    
    n.parm('sourcegroomobject').set(deform.path())
    
    
    
    ]]></script>
  </tool>

  <tool name="lz_add_vis_controll" label="Add display controll " icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    p = n.parm('display')
    p.setExpression(p.expression() + ' && !ch("../Masterctrldisplay")')
    #p.setExpression(p.expression() + ' && !ch("../Mastergeodisplay")')

]]></script>
  </tool>

  <tool name="check vis sel nodes" label="check vis sel nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    if n.parm('display').eval()==1:
        if n.isDisplayFlagSet():
            print n.name()
    ]]></script>
  </tool>

  <tool name="fix_rs_resample" label="Fix_rs_resample" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    r = n.node("resample")
    r.parm("length").set(0.005)]]></script>
  </tool>

  <tool name="Test JSON" label="Test JSON" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import json
#rules = json.load(open('D:/data.txt'))
"""
rules = {
    'origin': '#hello.capitalize#, #location#!',
    'hello': ['hello', 'greetings', 'howdy', 'hey'],
    'location': ['world', 'solar system', 'galaxy', 'universe']
}

with open('D:/data.txt', 'w') as outfile:
    json.dump(rules, outfile)
    
rules2 = json.load(open('D:/data.txt'))
print rules2.keys()
"""

config = dict()
config = json.load(open('D:/data.txt'))
config['sourceFolder'] = 'S:'
config['projects'] = ['Dog','Test','Boy']
config['lastProject'] = ['Dog']

with open('D:/data.txt', 'w') as outfile:
    json.dump(config, outfile)

    

    ]]></script>
  </tool>

  <tool name="Send To Substance" label="Send To Substance" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import subprocess
painter = "C:\Program Files\Allegorithmic\Substance Painter\Substance Painter.exe"
obj = "C:/Users/Pavel/Documents/MEGA/Projects/TESTs/01_HairSim/Cache/Temp/temp.obj"
out = hou.expandString("$JOB/Cache/Substance/")


subprocess.Popen([painter,"--mesh",obj,"--export-path",out])]]></script>
  </tool>
</shelfDocument>
