<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ Main" label="LZ Main">
    <memberTool name="save and increment"/>
    <memberTool name="Update JOB"/>
    <memberTool name="OpenJOB"/>
    <memberTool name="LZ QuickVex PyPanel"/>
    <memberTool name="Edit LZ Util"/>
    <memberTool name="Particle Display Type"/>
    <memberTool name="LZ Create Visualisers"/>
    <memberTool name="Render View"/>
    <memberTool name="ropnet3"/>
    <memberTool name="lz Flipbook"/>
    <memberTool name="BackGroundImage"/>
    <memberTool name="Reload Textures"/>
    <memberTool name="update snippets from clipboard"/>
    <memberTool name="start server"/>
    <memberTool name="Install Otl Lib"/>
    <memberTool name="fileCache finder"/>
    <memberTool name="New Flooating Panel"/>
    <memberTool name="tool_2"/>
    <memberTool name="NodeParms"/>
  </toolshelf>

  <tool name="Render View" label="Render View" icon="hicon:/SVGIcons.index?ROP_mantra.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
#pos goes from bottom to top, from left to rigth
dy = [0.025,0.65];
dx = [0.025,0.55];


#pos = (sz[0]*2 - 950 + int(sz[0]*dx[0]),int(sz[1]*(1 - dy[1] - dy[0])))
pos = (sz[0] + int(sz[0]*dx[0]),int(sz[1]*(1 - dy[1] - dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))


panel = d.createFloatingPanel(hou.paneTabType.SceneViewer,pos,size)

panes = panel.panes()
tab = panes[0].createTab(hou.paneTabType.IPRViewer)


panel.setName('RenderView')]]></script>
  </tool>

  <tool name="ropnet3" label="WEDGE_ROP_v4" icon="NETWORKS_rop">
    <helpURL>operator:Sop/ropnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/ropnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('ropnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_ShockWaves_WEDGE_ROP_v4 (Sop/ropnet)
set _obj_ShockWaves_WEDGE_ROP_v4 = `run("opadd -e -n -v ropnet WEDGE_ROP_v4")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_ShockWaves_WEDGE_ROP_v4
opspareds '    parm {   name    "execute2"      label   "Render Wedges"         type    button  joinnext        default { "0" }         parmtag { "autoscope" "0000000000000000" }      parmtag { "takecontrol" "always" }     }     parm {     name    "execute"       baseparm        label   "Render"        invisible       joinnext        export  none     }     parm {   name    "renderdialog"  baseparm        label   "Controls..."   export  none     }     parm {   name    "wedge"         label   "Wedge"         type    integer         default { "0" }         range   { 0 10 }     }     groupsimple {        name    "folder0"       label   "Wedge Settings"        parm {      name        "range1"            label       "Range"             type        intvector2          size        2           default     { "1" "3" }         range       { -1 1 }            parmtag     { "autoscope" "0000000000000000" }      }       parm {      name        "steps1"            label       "Number of Steps"           type        integer             default     { "3" }             range       { 1 10 }            parmtag     { "autoscope" "0000000000000000" }      }     }      groupsimple {      name    "folder1"       label   "Wedge Variables"       parm {      name        "parm1"             label       "Parm"      type        float       joinnext        default     { "0" }             range       { 0 10 }        }       parm {      name        "parm1_range"       label       "Range"             type        vector2             size        2           default     { "0" "0" }         range       { -1 1 }        }     }      parm {     name    "add_filecache"         label   "Add Filecache"         type    button  default { "0" }         parmtag { "script_callback" "name = \'geo\' + str(len(hou.pwd().children()));n = hou.copyNodesTo([(hou.pwd().node(\\"temp\\"))],hou.pwd())[0];ptg = hou.pwd().parmTemplateGroup();string = ptg.find(\'geo1\');string.setName(name);ptg.addParmTemplate(string);hou.pwd().setParmTemplateGroup(ptg);n.setName(name);n.parm(\'soppath\').setExpression(\'chsop(\\"../\' + name + \'\\")\');n.setFirstInput(hou.pwd().node(\'wedge\').inputs()[0]);hou.pwd().node(\'wedge\').setFirstInput(n);hou.pwd().layoutChildren();n.setSelected(False);hou.pwd().setSelected(True)" }       parmtag { "script_callback_language" "python" }     }     parm {        name    "geo1"  label   "SOP Path"      type    oppath  default { "/obj/setup_2/wedge_pop" }    parmtag { "autoscope" "0000000000000000" }      parmtag { "opfilter" "!!SOP!!" }        parmtag { "oprelative" "." }    parmtag { "script_action" "wn = kwargs[\'node\']\\nfcn = hou.node(kwargs[\'parmtuple\'].evalAsStrings()[0])\\n\\nfcn.parm(\'version\').setExpression(\'ch(\\"../\' + wn.name() + \'/wedge\\")\')\\n\\n" }       parmtag { "script_callback" "" }        parmtag { "script_callback_language" "python" }     } ' $_obj_ShockWaves_WEDGE_ROP_v4
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4 steps1
chkey -t 0 -v 3 -m 0 -a 0 -A 0 -T a  -F 'ch("range1y") - ch("range1x")+1' $_obj_ShockWaves_WEDGE_ROP_v4/steps1
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4 parm1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("parm1_rangex") + (ch("parm1_rangey")-ch("parm1_rangex"))/(ch("steps1")-1)*ch("wedge")' $_obj_ShockWaves_WEDGE_ROP_v4/parm1
chblockend
opparm -V 16.0.557 $_obj_ShockWaves_WEDGE_ROP_v4 wedge ( 1 ) range1 ( 0 2 ) steps1 ( steps1 ) parm1 ( parm1 ) parm1_range ( 0 100 ) geo1 ( "" )
chlock $_obj_ShockWaves_WEDGE_ROP_v4 +steps1 +parm1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4
opuserdata -n '___Version___' -v '16.0.557' $_obj_ShockWaves_WEDGE_ROP_v4
opcf $_obj_ShockWaves_WEDGE_ROP_v4

# Node $_obj_ShockWaves_WEDGE_ROP_v4_geo2 (Driver/geometry)
set _obj_ShockWaves_WEDGE_ROP_v4_geo2 = `run("opadd -e -n -v geometry geo2")`
oplocate -x `$arg2 + 50.079599999999999` -y `$arg3 + -208.864` $_obj_ShockWaves_WEDGE_ROP_v4_geo2
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 f1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f1")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/f1
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 f2
chkey -t 0 -v 240 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f2")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/f2
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 f3
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f3")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/f3
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 soppath
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chsop("../geo1")' $_obj_ShockWaves_WEDGE_ROP_v4_geo2/soppath
chblockend
opparm -V 16.0.557 $_obj_ShockWaves_WEDGE_ROP_v4_geo2 trange ( normal ) f ( f1 f2 f3 ) soppath ( soppath ) sopoutput ( '`chs( chs("soppath") + "/file")`' ) prerender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(0)' ) lprerender ( python ) postrender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(1)' ) lpostrender ( python )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4_geo2
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4_geo2
opuserdata -n '___Version___' -v '16.0.557' $_obj_ShockWaves_WEDGE_ROP_v4_geo2

# Node $_obj_ShockWaves_WEDGE_ROP_v4_wedge (Driver/wedge)
set _obj_ShockWaves_WEDGE_ROP_v4_wedge = `run("opadd -e -n -v wedge wedge")`
oplocate -x `$arg2 + 50.079599999999999` -y `$arg3 + -209.78700000000001` $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opparm $_obj_ShockWaves_WEDGE_ROP_v4_wedge  wedgeparams ( 1 )
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge execute
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../execute2")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/execute
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge range1x
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../range1x")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/range1x
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge range1y
chkey -t 0 -v 3 -m 0 -a 0 -A 0 -T a  -F 'ch("../range1y")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/range1y
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge steps1
chkey -t 0 -v 3 -m 0 -a 0 -A 0 -T a  -F 'ch("../steps1")' $_obj_ShockWaves_WEDGE_ROP_v4_wedge/steps1
chblockend
opparm $_obj_ShockWaves_WEDGE_ROP_v4_wedge execute ( execute ) driver ( /obj/setup_2/test_wedge ) random ( off ) wedgeparams ( 1 ) chan1 ( ../wedge ) range1 ( range1x range1y ) steps1 ( steps1 )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opuserdata -n '___Version___' -v '' $_obj_ShockWaves_WEDGE_ROP_v4_wedge

# Node $_obj_ShockWaves_WEDGE_ROP_v4_temp (Driver/geometry)
set _obj_ShockWaves_WEDGE_ROP_v4_temp = `run("opadd -e -n -v geometry temp")`
oplocate -x `$arg2 + 53.3949` -y `$arg3 + -208.864` $_obj_ShockWaves_WEDGE_ROP_v4_temp
chblockbegin
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp f1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f1")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/f1
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp f2
chkey -t 0 -v 240 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f2")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/f2
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp f3
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch( chs("soppath") + "/f3")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/f3
chadd -t 0 0 $_obj_ShockWaves_WEDGE_ROP_v4_temp soppath
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chsop("../geo1")' $_obj_ShockWaves_WEDGE_ROP_v4_temp/soppath
chblockend
opparm -V 16.0.557 $_obj_ShockWaves_WEDGE_ROP_v4_temp trange ( normal ) f ( f1 f2 f3 ) soppath ( soppath ) sopoutput ( '`chs( chs("soppath") + "/file")`' ) prerender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(0)' ) lprerender ( python ) postrender ( 'hou.node(hou.pwd().parm("soppath").eval()).parm("loadfromdisk").set(1)' ) lpostrender ( python )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_ShockWaves_WEDGE_ROP_v4_temp
opexprlanguage -s hscript $_obj_ShockWaves_WEDGE_ROP_v4_temp
opuserdata -n '___Version___' -v '16.0.557' $_obj_ShockWaves_WEDGE_ROP_v4_temp
oporder -e geo2 wedge temp 
opcf ..
opset -p on $_obj_ShockWaves_WEDGE_ROP_v4

opcf $arg1
opcf $_obj_ShockWaves_WEDGE_ROP_v4
opwire -n $_obj_ShockWaves_WEDGE_ROP_v4_geo2 -0 $_obj_ShockWaves_WEDGE_ROP_v4_wedge
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_ShockWaves_WEDGE_ROP_v4
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_ShockWaves_WEDGE_ROP_v4
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="lz Flipbook" label="LZ Flipbook" icon="hicon:/SVGIcons.index?book.svg">
    <script scriptType="python"><![CDATA[import toolutils
import os
if kwargs['ctrlclick'] == True:
    import subprocess
    dir = hou.expandString('$HC') +"\\"+ hou.expandString('$HIPNAME') + "\\FB"
    subprocess.Popen('explorer "' + dir  + '"');
else:
    dir = hou.expandString("$HC/$HIPNAME/FB")
    if not os.path.exists(dir):
        os.makedirs(dir)
    
    dir += "/"
    
    files = os.listdir(dir)
    if len(files) > 0:
        increment = int(files[len(files)-1].split("_")[0]) + 1
    else:
        increment = 1
        
        
    user_input = hou.ui.readInput("Flipbook name",buttons=('Render','Cancel'),initial_contents=str(increment).zfill(3)+" " )
    if user_input[0] == 0:
        name = str(user_input[1])
        name = "_".join(name.split())
        
        sv = toolutils.sceneViewer()
        
        fbs =  sv.flipbookSettings().stash()
        fbs.output(dir + name + "_$F.pic")
        sv.flipbook(None,fbs)    
        
        import subprocess
        ip = hou.expandString('$HB/mplay')
        seq = hou.expandString(dir + name + '_*.pic')
        subprocess.Popen([ip, seq])
]]></script>
  </tool>

  <tool name="New Flooating Panel" label="New Floating Panel" icon="hicon:/SVGIcons.index?BUTTONS_chooser.svg">
    <script scriptType="python"><![CDATA[def openInNewTab(node):
    # get screen size
    import ctypes
    user32 = ctypes.windll.user32
    sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
    # SET size
    dy = [0.05,0.65];
    dx = [0.025,0.6];    
    
    pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
    size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))    
    
    #create panel
    panel = d.createFloatingPanel(hou.paneTabType.NetworkEditor,pos,size)
    #split
    pns = panel.panes()
    pns[0].splitHorizontally()
    if node.type().name()=='chopnet':
        panel.panes()[1].splitHorizontally()
        
        #same but incremented panel
        #set link groups
        pts = panel.paneTabs() 
        pts[0].setLinkGroup(hou.paneLinkType.Group1)
        pts[1].setLinkGroup(hou.paneLinkType.Group1)
        pts[2].setLinkGroup(hou.paneLinkType.Group1)
        #set node type
        pts[1].cd(node.path())
        pts[2].setType(hou.paneTabType.Parm)
        
        #make motion fx
        pts[0].setType(hou.paneTabType.ChannelViewer)
        #frame selection 
        pts = panel.paneTabs()        
        #pts[0].frameSelection()  
        pts[1].frameSelection()
        #pts[2].frameSelection()
    else :
        #set link groups
        pts = panel.paneTabs()        
        pts[0].setLinkGroup(hou.paneLinkType.Group1)
        pts[1].setLinkGroup(hou.paneLinkType.Group1)
        #set node type
        pts[0].cd(node.path())
        pts[1].setType(hou.paneTabType.Parm)
        #frame selection
        pts = panel.paneTabs()        
        pts[0].frameSelection()  

## MAIN
#print kwargs 

d = hou.ui.curDesktop()
if hou.selectedNodes() is not ():
    for node in hou.selectedNodes():
        openInNewTab(node)
else:
    net_editor =  hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    node = net_editor.pwd()
    openInNewTab(node)
    net_editor.cd("..")

    
    
]]></script>
  </tool>

  <tool name="BackGroundImage" label="BackGroundImage" icon="hicon:/SVGIcons.index?MISC_tutorials.svg">
    <script scriptType="python"><![CDATA[# save sreenshot
import toolutils
import os,subprocess
import lzutil

# Set directory for screenshots
unexpandedDir = "$JOB/Flipbook/BG_Snapshots"
dir = hou.expandString(unexpandedDir)  + '/'

# Ask User For a name
if not os.path.exists(dir):
    os.makedirs(dir)
files = os.listdir(dir)
increment = 1
if len(files) > 0:
    increment += int(files[len(files)-1].split("_")[0])    
user_input = hou.ui.readInput("SnapshotName",buttons=('Snapshot','Cancel'),initial_contents=str(increment).zfill(3)+" " )


if user_input[0] == 0:
    name = str(user_input[1])
    name = "_".join(name.split()) + ".png"
    
    # Capture a flipbook
    sv = toolutils.sceneViewer()
    fbs =  sv.flipbookSettings().stash()
    fbs.output(dir + name)
    fbs.frameRange(hou.Vector2(hou.frame(),hou.frame()))
    fbs.beautyPassOnly(True)
    fbs.outputZoom(25)
    fbs.outputToMPlay(1)
    sv.flipbook(None,fbs)  
    
    
        
    #create new network image
    editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    path =  unexpandedDir + "/" + name
    lzutil.copyToClipboard(path)
    
    position = hou.Vector2(editor.visibleBounds().center() + hou.Vector2(0,0));
    w = editor.visibleBounds().size().x()* 0.45
    h = w
    
    image = hou.NetworkImage()
    image.setPath(path)
    image.setRect(hou.BoundingRect(position[0]-w, position[1]-h, position[0]+w, position[1]+h))
    images = editor.backgroundImages()
    images = images + tuple([image])    
    editor.setBackgroundImages(images)






]]></script>
  </tool>

  <tool name="tool_2" label="Set Material" icon="hicon:/SVGIcons.index?SHOP_material.svg">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
objs = hou.node('/obj').children()
choices = []
for obj in objs:
    if obj.type().name() == 'geo':
        choices.append(obj.name()) 



for node in nodes:
    node_name = node.parent().type().name()
    print node_name
    if (node_name == 'shop' or node_name == 'mat'):
        answers = hou.ui.selectFromList(choices,title = node.name())
        for answer in answers:
            objName = choices[answer]
            obj = hou.node('/obj').node(objName)
            obj.parm('shop_materialpath').set(node.path())]]></script>
  </tool>

  <tool name="LZ Grains Setup" label="LZ Grains Setup" icon="hicon:/SVGIcons.index?SHELF_dry_sand.svg">
    <toolMenuContext name="network">
      <contextOpType>Sop/grainsource</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('dopnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_box1_grainsource1 (Sop/grainsource)
set _obj_box1_grainsource1 = `run("opadd -e -n -v grainsource grainsource1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_box1_grainsource1
opparm -V 3 $_obj_box1_grainsource1 particlesep ( 0.050000000000000003 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_grainsource1
opexprlanguage -s hscript $_obj_box1_grainsource1
opuserdata -n '___Version___' -v '3' $_obj_box1_grainsource1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_grainsource1
opuserdata -n '___toolid___' -v 'dynamics_popgrains' $_obj_box1_grainsource1
opset -p on $_obj_box1_grainsource1
opcf $arg1

# Node $_obj_box1_popnet (Sop/dopnet)
set _obj_box1_popnet = `run("opadd -e -n -v dopnet popnet")`
oplocate -x `$arg2 + 1.9854592095521583e-17` -y `$arg3 + -3.1543624399492391` $_obj_box1_popnet
opspareds '    parm {   name    "isplayer"      baseparm        label   "Dopnet is Player"      joinnext        export  none     }     parm {   name    "playfilesname"         baseparm        label   "Playback Simulation"   export  none     }     group {  name    "stdswitcher4"  label   "Object Merge"          multiparm {         name        "numobj"            label       "Number of Objects"         baseparm        default     1           parm {              name    "enable#"               baseparm                label   "Enable"                export  none        }       parm {              name    "objname#"              baseparm                label   "Object"                export  none        }       parm {              name    "dataname#"             baseparm                label   "Data"          export  none        }   }      }      group {   name    "stdswitcher4_1"        label   "Simulation"    parm {      name        "resimulate"        baseparm        label       "Reset Simulation"          export      none    }       parm {      name        "initialstate"      baseparm        label       "Initial State"             export      none    }       parm {      name        "timestep"          baseparm        label       "Time Step"         export      none    }       parm {      name        "substep"           baseparm        label       "Sub Steps"         export      none    }       parm {      name        "timeoffset"        baseparm        label       "Offset Time"       export      none    }       parm {      name        "startframe"        baseparm        label       "Start Frame"       export      none    }       parm {      name        "timescale"         baseparm        label       "Scale Time"        export      none    }       parm {      name        "maxfeedback"       baseparm        label       "Max Feedback Loops"        export      none    }       parm {      name        "autoresim"         baseparm        label       "Enable Automatic Resimulation"             export      none    }       parm {      name        "datahints"         baseparm        label       "Provide Data Hints"        export      none    }       parm {      name        "interpolate"       baseparm        label       "Interpolate Display Data"          export      none    }     }      group {    name    "stdswitcher4_2"        label   "Cache"         parm {      name        "cacheenabled"      baseparm        label       "Cache Simulation"          export      none    }       parm {      name        "compresssims"      baseparm        label       "Compress .sim Files"       export      none    }       parm {      name        "cachetodisk"       baseparm        label       "Allow Caching To Disk"             export      none    }       parm {      name        "cachetodisknoninteractive"         baseparm        label       "Cache to Disk in Non-Interactive Sessions"         export      none    }       parm {      name        "cachesubsteps"             baseparm        label       "Cache Substep Data"        export      none    }       parm {      name        "cachemaxsize"      baseparm        label       "Cache Memory (MB)"         export      none    }       parm {      name        "timeless"          baseparm        label       "Timeless (No History)"             export      none    }       parm {      name        "explicitcache"             baseparm        label       "Save Checkpoints"          export      none    }       parm {      name        "explicitcachename"         baseparm        label       "Checkpoint File"           export      none    }       parm {      name        "explicitcachensteps"       baseparm        label       "Checkpoint Trail Length"           export      none    }       parm {      name        "explicitcachecheckpointspacing"            baseparm        label       "Checkpoint Interval"       export      none    }     }      parm {     name    "particle_separation"   label   "Particle Separation"   type    float   default { "0" }         range   { 0! 10 }     } ' $_obj_box1_popnet
opparm $_obj_box1_popnet  numobj ( 1 )
chblockbegin
chadd -t 0 0 $_obj_box1_popnet timestep
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("timescale")/(ch("substep")*$FPS)' $_obj_box1_popnet/timestep
chadd -t 0 0 $_obj_box1_popnet timeoffset
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '(ch("startframe")-1)/$FPS' $_obj_box1_popnet/timeoffset
chadd -t 0 0 $_obj_box1_popnet particle_separation
chkey -t 0 -v 0.10000000000000001 -m 0 -a 0 -A 0 -T a  -F 'ch("../grainsource1/particlesep")' $_obj_box1_popnet/particle_separation
chblockend
opparm -V 16.0.557 $_obj_box1_popnet objname1 ( p* ) particle_separation ( particle_separation )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet
opexprlanguage -s hscript $_obj_box1_popnet
opcf $_obj_box1_popnet

# Node $_obj_box1_popnet_popsolver (Dop/popsolver::2.0)
set _obj_box1_popnet_popsolver = `run("opadd -e -n -v popsolver::2.0 popsolver")`
oplocate -x `$arg2 + 0` -y `$arg3 + 1.1294999999999997` $_obj_box1_popnet_popsolver
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_popsolver substeps
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("minimumsubsteps")' $_obj_box1_popnet_popsolver/substeps
chblockend
opparm $_obj_box1_popnet_popsolver minimumsubsteps ( 10 ) substeps ( substeps )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popsolver
opexprlanguage -s hscript $_obj_box1_popnet_popsolver
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popsolver
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_popsolver
opuserdata -n '___toolid___' -v 'dynamics_poplocation' $_obj_box1_popnet_popsolver

# Node $_obj_box1_popnet_source_first_input (Dop/popsource::2.0)
set _obj_box1_popnet_source_first_input = `run("opadd -e -n -v popsource::2.0 source_first_input")`
oplocate -x `$arg2 + 1.1307500120162963` -y `$arg3 + 6.3452825593120297` $_obj_box1_popnet_source_first_input
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_source_first_input impulseactiveate
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$F==1' $_obj_box1_popnet_source_first_input/impulseactiveate
chblockend
opparm $_obj_box1_popnet_source_first_input folder0 ( 1 1 1 1 1 ) emittype ( allgeo ) usecontextgeo ( first ) impulseactiveate ( impulseactiveate )
opset -d off -r off -h off -f off -y off -t on -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_source_first_input
opexprlanguage -s hscript $_obj_box1_popnet_source_first_input
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_source_first_input
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_source_first_input
opuserdata -n '___toolid___' -v 'dynamics_popsource' $_obj_box1_popnet_source_first_input

# Node $_obj_box1_popnet_popsprite1 (Dop/popsprite)
set _obj_box1_popnet_popsprite1 = `run("opadd -e -n -v popsprite popsprite1")`
oplocate -x `$arg2 + 1.1307500120162963` -y `$arg3 + 5.3677966426084902` $_obj_box1_popnet_popsprite1
opparm $_obj_box1_popnet_popsprite1  alpharamp ( 2 )
opparm $_obj_box1_popnet_popsprite1 spritemap ( '$HFS/houdini/pic/sphere_matte.pic' ) alpharamp2pos ( 1 ) alpharamp2value ( 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popsprite1
opexprlanguage -s hscript $_obj_box1_popnet_popsprite1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popsprite1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popsprite1
opuserdata -n '___toolid___' -v 'dynamics_popsprite' $_obj_box1_popnet_popsprite1

# Node $_obj_box1_popnet_popcolor1 (Dop/popcolor)
set _obj_box1_popnet_popcolor1 = `run("opadd -e -n -v popcolor popcolor1")`
oplocate -x `$arg2 + 1.1331191427234746` -y `$arg3 + 4.3677966306875611` $_obj_box1_popnet_popcolor1
opparm $_obj_box1_popnet_popcolor1  ramp ( 3 ) blendramp ( 2 ) alpharamp ( 2 )
opparm $_obj_box1_popnet_popcolor1 colortype ( ramp ) ramp ( 3 ) localramp ( 'ramp = rand(@id);' ) ramp1c ( 0.44900000095367432 0.20417217910289764 0.14547599852085114 ) ramp2pos ( 0.23719675838947296 ) ramp2c ( 0.89999997615814209 0.49850195646286011 0.23939996957778931 ) blendramp2pos ( 1 ) blendramp2value ( 1 ) alpharamp2pos ( 1 ) alpharamp2value ( 1 ) ramp3pos ( 0.98382747173309326 ) ramp3c ( 0.89999997615814209 0.65166199207305908 0.49140000343322754 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popcolor1
opexprlanguage -s hscript $_obj_box1_popnet_popcolor1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popcolor1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popcolor1
opuserdata -n '___toolid___' -v 'dynamics_popcolor' $_obj_box1_popnet_popcolor1

# Node $_obj_box1_popnet_groundplane1 (Dop/groundplane)
set _obj_box1_popnet_groundplane1 = `run("opadd -e -n -v groundplane groundplane1")`
oplocate -x `$arg2 + -1.5` -y `$arg3 + 0.37949999999999973` $_obj_box1_popnet_groundplane1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_groundplane1
opexprlanguage -s hscript $_obj_box1_popnet_groundplane1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_groundplane1
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_groundplane1
opuserdata -n '___toolid___' -v 'dop_groundplane' $_obj_box1_popnet_groundplane1

# Node $_obj_box1_popnet_staticobject1 (Dop/staticobject)
set _obj_box1_popnet_staticobject1 = `run("opadd -e -n -v staticobject staticobject1")`
oplocate -x `$arg2 + -3` -y `$arg3 + 0.37949999999999973` $_obj_box1_popnet_staticobject1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_staticobject1 createframe
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(opcreator(".")+"/startframe")' $_obj_box1_popnet_staticobject1/createframe
chadd -t 0 0 $_obj_box1_popnet_staticobject1 bullet_shrink_amount
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("bullet_collision_margin")' $_obj_box1_popnet_staticobject1/bullet_shrink_amount
chblockend
opparm -V 4 $_obj_box1_popnet_staticobject1 soppath ( '`opinputpath("..",3)`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_staticobject1
opexprlanguage -s hscript $_obj_box1_popnet_staticobject1
opuserdata -n '___Version___' -v '4' $_obj_box1_popnet_staticobject1
opuserdata -n '___toolcount___' -v '16' $_obj_box1_popnet_staticobject1
opuserdata -n '___toolid___' -v 'dop_staticobject' $_obj_box1_popnet_staticobject1

# Node $_obj_box1_popnet_popgrains1 (Dop/popgrains)
set _obj_box1_popnet_popgrains1 = `run("opadd -e -n -v popgrains popgrains1")`
oplocate -x `$arg2 + 1.1296691476527789` -y `$arg3 + 3.3409509811827398` $_obj_box1_popnet_popgrains1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_popgrains1 particlesep
chkey -t 0 -v 0.10000000000000001 -m 0 -a 0 -A 0 -T a  -F 'ch("../particle_separation")' $_obj_box1_popnet_popgrains1/particlesep
chblockend
opparm $_obj_box1_popnet_popgrains1 particlesep ( particlesep ) folder0 ( 1 1 1 ) opencl ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popgrains1
opexprlanguage -s hscript $_obj_box1_popnet_popgrains1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popgrains1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popgrains1
opuserdata -n '___toolid___' -v 'dynamics_popgrains' $_obj_box1_popnet_popgrains1
opcf ..
opcf $_obj_box1_popnet

# Node $_obj_box1_popnet_output (Dop/output)
set _obj_box1_popnet_output = `run("opadd -e -n -v output output")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.8705000000000003` $_obj_box1_popnet_output
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_output f1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FSTART' $_obj_box1_popnet_output/f1
chadd -t 0 0 $_obj_box1_popnet_output f2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_obj_box1_popnet_output/f2
chblockend
opparm $_obj_box1_popnet_output
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_output
opexprlanguage -s hscript $_obj_box1_popnet_output
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_output

# Node $_obj_box1_popnet_popobject (Dop/popobject)
set _obj_box1_popnet_popobject = `run("opadd -e -n -v popobject popobject")`
oplocate -x `$arg2 + -1.1295999999999999` -y `$arg3 + 2.5602000269293788` $_obj_box1_popnet_popobject
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_popobject createframe
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(opcreator(".")+"/startframe")' $_obj_box1_popnet_popobject/createframe
chblockend
opparm $_obj_box1_popnet_popobject
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popobject
opexprlanguage -s hscript $_obj_box1_popnet_popobject
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popobject
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popobject
opuserdata -n '___toolid___' -v 'dynamics_poplocation' $_obj_box1_popnet_popobject

# Node $_obj_box1_popnet_wire_pops_into_here (Dop/merge)
set _obj_box1_popnet_wire_pops_into_here = `run("opadd -e -n -v merge wire_pops_into_here")`
oplocate -x `$arg2 + 1.1295999999999999` -y `$arg3 + 2.1084000089764596` $_obj_box1_popnet_wire_pops_into_here
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_wire_pops_into_here activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_box1_popnet_wire_pops_into_here/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_wire_pops_into_here
opexprlanguage -s hscript $_obj_box1_popnet_wire_pops_into_here

# Node $_obj_box1_popnet_gravity1 (Dop/gravity)
set _obj_box1_popnet_gravity1 = `run("opadd -e -n -v gravity gravity1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.1205000000000003` $_obj_box1_popnet_gravity1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_gravity1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_box1_popnet_gravity1/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_gravity1
opexprlanguage -s hscript $_obj_box1_popnet_gravity1
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_gravity1
opuserdata -n '___toolid___' -v 'LZ_Gravity_Groundplane' $_obj_box1_popnet_gravity1

# Node $_obj_box1_popnet_merge1 (Dop/merge)
set _obj_box1_popnet_merge1 = `run("opadd -e -n -v merge merge1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -0.37050000000000027` $_obj_box1_popnet_merge1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_merge1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_box1_popnet_merge1/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_merge1
opexprlanguage -s hscript $_obj_box1_popnet_merge1
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_merge1
opuserdata -n '___toolid___' -v 'LZ_Gravity_Groundplane' $_obj_box1_popnet_merge1
oporder -e output popsolver popobject wire_pops_into_here source_first_input popsprite1 popcolor1 gravity1 merge1 groundplane1 staticobject1 popgrains1 
opcf ..
opset -p on $_obj_box1_popnet

opcf $arg1
opwire -n $_obj_box1_transform1 -0 $_obj_box1_grainsource1
opcf $arg1
opwire -n $_obj_box1_grainsource1 -0 $_obj_box1_popnet
opwire -n $_obj_box1_transform2 -3 $_obj_box1_popnet
opcf $_obj_box1_popnet
opwire -n $_obj_box1_popnet_gravity1 -0 $_obj_box1_popnet_output
opwire -n $_obj_box1_popnet_popobject -0 $_obj_box1_popnet_popsolver
opwire -n $_obj_box1_popnet_wire_pops_into_here -2 $_obj_box1_popnet_popsolver
opwire -n $_obj_box1_popnet_popgrains1 -0 $_obj_box1_popnet_wire_pops_into_here
opwire -n $_obj_box1_popnet_source_first_input -0 $_obj_box1_popnet_popsprite1
opwire -n $_obj_box1_popnet_popsprite1 -0 $_obj_box1_popnet_popcolor1
opwire -n $_obj_box1_popnet_merge1 -0 $_obj_box1_popnet_gravity1
opwire -n $_obj_box1_popnet_staticobject1 -0 $_obj_box1_popnet_merge1
opwire -n $_obj_box1_popnet_groundplane1 -1 $_obj_box1_popnet_merge1
opwire -n $_obj_box1_popnet_popsolver -2 $_obj_box1_popnet_merge1
opwire -n $_obj_box1_popnet_popcolor1 -0 $_obj_box1_popnet_popgrains1
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_box1_popnet
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_box1_grainsource1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="start server" label="Start Server" icon="hicon:/SVGIcons.index?BUTTONS_internet.svg">
    <script scriptType="python"><![CDATA[import hrpyc,lzutil
hrpyc.start_server()


lzutil.copyToClipboard("con, hou = hrpyc.import_remote_module()")

'''
import PySide.QtGui as qtg
app = qtg.QApplication.instance()
clipboard = app.clipboard()
string = "con, hou = hrpyc.import_remote_module()"
clipboard.setText(string)
''']]></script>
  </tool>

  <tool name="LZ QuickVex PyPanel" label="LZ QuickVex PyPanel" icon="hicon:/SVGIcons.index?NETWORKS_vopnet.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.1,0.95];
dx = [0.05,0.35];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))

#pos = (3387, 103)
#size = (727, 1254)

ctrlclick = kwargs["ctrlclick"]
interface = "LZ_Vex" if not ctrlclick else "vexfunc"

panel = d.createFloatingPanel(hou.paneTabType.PythonPanel,pos,size)
pypanel = panel.paneTabs()[0]
pypanel.setActiveInterface(hou.pypanel.interfaceByName(interface))]]></script>
  </tool>

  <tool name="LZ Create Visualisers" label="LZ Create Visualisers" icon="hicon:/SVGIcons.index?NODEFLAGS_display.svg">
    <script scriptType="python"><![CDATA[import lzutil
import toolutils
n = lzutil.viewNode()
geo = n.geometry()
pt_attribs = geo.pointAttribs()

sv = toolutils.sceneViewer()
vp = sv.curViewport()

att_names = []
pt_attribs_filtered = []

for att in pt_attribs:
    if att.name()!='P' and att.name()!='N' and att.name()!='v':
        att_names += [att.name()]
        pt_attribs_filtered += [att]

ans = hou.ui.selectFromList(att_names)

for id  in ans:
    att = pt_attribs_filtered[id]
    size = att.size()        
    v = hou.viewportVisualizers.createVisualizer(hou.viewportVisualizers.type('vis_marker'))
    v.setName(att.name())
    v.setLabel(att.name())
    v.setParm('attrib',att.name())
    if size > 2:
        v.setParm('style','vector')
    v.setIsActive(1,vp)    
]]></script>
  </tool>

  <tool name="Create Project" label="Create Project" icon="hicon:/SVGIcons.index?BUTTONS_take.svg">
    <script scriptType="python"><![CDATA[import lzutil
lzutil.setProject()

#import os
## get root dir
#start_dir = hou.expandString("$HMEGA") + "/! Projects/"
#answer = hou.ui.selectFile(start_directory=start_dir,file_type=hou.fileType.Directory)
#
#if answer is not '':
#    # Make dirs
#    os.makedirs(answer)
#    os.makedirs(answer + "/hip")
#    os.makedirs(answer + "/flipbook")
#    os.makedirs(answer + "/render")
#    
#    hipname = answer.split("/").pop()
#    
#    hou.appendSessionModuleSource("import lzutil\nlzutil.updateJobFromHipLocation()")
#    
#    hou.hscript('setenv JOBNAME ='+ hipname)
#    print answer
#    hou.hscript('setenv JOB ='+ answer)    
#    
#    hou.hipFile.save(answer + "/hip/" + hipname +".000" +".hip")        
        

    
    
    


        ]]></script>
  </tool>

  <tool name="save and increment" label="Save and Increment" icon="hicon:/SVGIcons.index?COP2_file.svg">
    <script scriptType="python"><![CDATA[hou.hipFile.saveAndIncrementFileName()]]></script>
  </tool>

  <tool name="Reload Textures" label="Reload Textures" icon="SHELF_clear_texture_cache">
    <script scriptType="hscript"><![CDATA[texcache -c
glcache -c]]></script>
  </tool>

  <tool name="update snippets from clipboard" label="update snippets from clipboard" icon="hicon:/SVGIcons.index?BUTTONS_cook.svg">
    <script scriptType="python"><![CDATA[import lzutil
for n in hou.selectedNodes():
    lzutil.updateSnippetFromClipboard(n)]]></script>
  </tool>

  <tool name="Install Otl Lib" label="Install Otl Lib" icon="hicon:/SVGIcons.index?VOP_subnetconnector.svg">
    <script scriptType="python"><![CDATA[import lzutil
lzutil.installOtlLibsUI()

'''
import glob
path = hou.expandString("$OTLS") + "\\*/"
libs =  glob.glob(path)
libs = [e.split("\\")[-2] for e in libs]
print libs

answer =  hou.ui.selectFromList(libs)
for ans in answer:
    lib = libs[ans]
    installOtlLib(lib)
    print  "\nimport lzutil\nlzutil.installOtlLib('"+lib +"')"
    hou.appendSessionModuleSource( "import lzutil\nlzutil.installOtlLib('"+lib +"')" )
''']]></script>
  </tool>

  <tool name="fileCache finder" label="FileCache finder" icon="hicon:/SVGIcons.index?SOP_filecache.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.4,0.95];
dx = [0.5,0.8];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))

pos = (3387, 103)
size = (1100, 1254)

panel = d.createFloatingPanel(hou.paneTabType.PythonPanel,pos,size)
pypanel = panel.paneTabs()[0]
pypanel.setActiveInterface(hou.pypanel.interfaceByName('File Cache Finder'))]]></script>
  </tool>

  <tool name="Particle Display Type" label="Particle Display Type" icon="hicon:/SVGIcons.index?POP_property.svg">
    <script scriptType="python"><![CDATA[import toolutils
sv = toolutils.sceneViewer()
vp = sv.curViewport()
settings = vp.settings()

curr_type = settings.particleDisplayType()
points = hou.viewportParticleDisplay.Points
pixels = hou.viewportParticleDisplay.Pixels

new_type = pixels if (curr_type == points) else points

settings.particleDisplayType( new_type )]]></script>
  </tool>

  <tool name="OpenJOB" label="OpenJOB" icon="hicon:/SVGIcons.index?SOP_pack.svg">
    <helpText><![CDATA["""click - open JOB folder
ctrl+click - open HIP folder"""]]></helpText>
    <script scriptType="python"><![CDATA[import lzutil
if kwargs['ctrlclick']:
    lzutil.openFolderFromEnv("$HIP")
else:
    lzutil.openFolderFromEnv("$JOB")]]></script>
  </tool>

  <tool name="Edit LZ Util" label="Edit LZ Util" icon="hicon:/SVGIcons.index?BUTTONS_copy.svg">
    <helpText><![CDATA["""open lzutil.py in notepad
ctrl+click: open lzQuickVEX
alt+click: hscript"""]]></helpText>
    <script scriptType="python"><![CDATA[import subprocess
ctrlclick = kwargs["ctrlclick"]
shiftclick = kwargs["shiftclick"]
altclick = kwargs["altclick"]

npp = "C:\\Program Files (x86)\\Notepad++\\notepad++.exe"

lzutils = hou.expandString('$HEXT') + "\\scripts\\python\\lzutil.py"
lzquickvex = hou.expandString('$HEXT') + "\\lz_quick_vex.txt"
hscript = hou.expandString('$HEXT') + "\\hscript.txt"

file = lzutils
if ctrlclick:
    file = lzquickvex
elif altclick:
    file = hscript


command = [npp,file]
subprocess.Popen(command)]]></script>
  </tool>

  <tool name="Update JOB" label="Update JOB" icon="hicon:/SVGIcons.index?BUTTONS_down.svg">
    <helpText><![CDATA["""Set project based on current hip location and append project setting to startup scripts"""]]></helpText>
    <script scriptType="python"><![CDATA[import lzutil
ctrlclick = kwargs["ctrlclick"]
if ctrlclick:
    #hou.appendSessionModuleSource("import lzutil\nlzutil.updateJobFromHipLocation()")
    lzutil.updateJobFromHipLocation()
    lzutil.updateJobNameFromHipLocation()
else:
    print ("")
    print("JOBNAME: " + hou.expandString('$JOBNAME'))
    print("JOB:     " + hou.expandString('$JOB'))
    print("HIP:     " + hou.expandString('$HIP'))
    ]]></script>
  </tool>

  <tool name="NodeParms" label="NodeParms" icon="hicon:/SVGIcons.index?BUTTONS_jump_to_line.svg">
    <script scriptType="python"><![CDATA[def createParmWindow(n):
    # create Size and Center
    dy = [0.1,0.95];
    dx = [0.05,0.35];
    import ctypes
    user32 = ctypes.windll.user32
    sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
    pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
    size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))
    
    d = hou.ui.curDesktop()
    
    panel = d.createFloatingPanel(hou.paneTabType.Parm,pos,size)
    tab = panel.paneTabs()[0]
    tab.setCurrentNode(n)
    tab.linkGroup = hou.paneLinkType.Pinned
    
    
for n in hou.selectedNodes():
    createParmWindow(n);]]></script>
  </tool>
</shelfDocument>
