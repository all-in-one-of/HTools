<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ Radial Menu" label="LZ Radial Menu">
    <memberTool name="LZ Add fur"/>
    <memberTool name="LZ kwargs"/>
    <memberTool name="Perfomance Monitor"/>
    <memberTool name="check shelf tool paths"/>
  </toolshelf>

  <tool name="LZ Add fur" label="LZ Add fur" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
import objecttoolutils
import furtoolutils

def createHairPiece(skin,name):
    #create paint_hair node
    paint_hair = skin.createOutputNode("paint","paint_" + name)
    paint_hair.setPosition(skin.position() + hou.Vector2(1.6944 + 3*(len(out_skin_node.outputs()) - 2),-0.895750000045))
    paint_hair.parm("overridecd").set(1)
    paint_hair.parm("cdname").set(name)
    paint_hair.parm("doreflect").set(1)
    paint_hair.parm("symaxisx").set(1.0)
    paint_hair.parm("symaxisz").set(0.0)
    
    
    #create delete_non_hair node
    delete_non_hair = paint_hair.createOutputNode("delete","delete_non_" + name)
    delete_non_hair.setPosition(paint_hair.position() + hou.Vector2(1.20338012477,-0.82970324467))
    delete_non_hair.parm("group").set('@`chs(opinputpath(".",0)+"/cdname")`<0.20')
    delete_non_hair.parm("entity").set(1)    
    
    #create bound_hair node
    bound_hair = delete_non_hair.createOutputNode("bound","bound_" + name)
    bound_hair.setPosition(delete_non_hair.position() + hou.Vector2(0.0,-0.746738848322))
    bound_hair.parm("minpadx").set(0.005)
    bound_hair.parm('minpady').setExpression('ch("minpadx")',language = hou.exprLanguage.Hscript)
    bound_hair.parm('minpadz').setExpression('ch("minpadx")',language = hou.exprLanguage.Hscript)
    bound_hair.parm('maxpadx').setExpression('ch("minpadx")',language = hou.exprLanguage.Hscript)
    bound_hair.parm('maxpady').setExpression('ch("minpadx")',language = hou.exprLanguage.Hscript)
    bound_hair.parm('maxpadz').setExpression('ch("minpadx")',language = hou.exprLanguage.Hscript)
    
    #create bbox_hair node
    bbox_hair = paint_hair.createOutputNode("attribwrangle","bbox_" + name)
    bbox_hair.setPosition(paint_hair.position() + hou.Vector2(-0.00299999653362,-2.46307741718))
    bbox_hair.parm("snippet").set("int c = chi('connected');\n@bx = clamp(relbbox(c,@P).x,0,1);\n@by = clamp(relbbox(c,@P).y,0,1);\n@bz = clamp(relbbox(c,@P).z,0,1);\n")
    # Create spare parameter connected
    ptg = bbox_hair.parmTemplateGroup()
    parm = hou.IntParmTemplate('connected','Connected',1)
    ptg.addParmTemplate(parm)
    bbox_hair.setParmTemplateGroup(ptg)
    # set this parameter
    bbox_hair.parm('connected').setExpression('n = hou.pwd()\nreturn len(n.inputs())>1',language = hou.exprLanguage.Python)
    bbox_hair.setInput(1,bound_hair)
    
    #create OUT_SKIN node
    OUT_HAIR = bbox_hair.createOutputNode("null","OUT_" + name)
    OUT_HAIR.setDisplayFlag(True)
    pass

    
# MAIN    
active_pane = toolutils.activePane(kwargs)
container = objecttoolutils.getObjNodeContainer(active_pane.pwd())
restskingeo = furtoolutils.selectObject(active_pane,"Select a static geometry to add fur to. " "Press Enter to continue.")
animskingeo = None    
    
out_skin_node = restskingeo.node('OUT_SKIN')    
if out_skin_node is None:
    hair_name = "hair"
    # CREATE INITIAL SETUP
    skin = restskingeo.displayNode()
    
    bbox = skin.createOutputNode('attribwrangle','skin_bbox')
    bbox.parm('snippet').set("@sbx = clamp(relbbox(0,@P).x,0,1);\n@sby = clamp(relbbox(0,@P).y,0,1);\n@sbz = clamp(relbbox(0,@P).z,0,1);")
    
    out_skin_node = bbox.createOutputNode('null','OUT_SKIN')
        
    # vdb
    vdb = out_skin_node.createOutputNode('vdbfrompolygons','vdb')
    vdb.parm('voxelsize').set(0.005)
    vdb.parm('useworldspaceunits').set(1)
    vdb.parm('exteriorband').set(0.1)
    vdb.parm('interiorband').setExpression('ch("exteriorband")')
    vdb.createOutputNode('null','OUT_VDB')
    
    createHairPiece(out_skin_node,hair_name)
    # END INITIAL SETUP
else:
    hair_name = hou.ui.readInput("Hair Piece Name")[1]
    if hair_name is "":
        hair_name = "hair_" + str(len(out_skin_node.outputs()))
    hair_name = "_".join(hair_name.split())
    createHairPiece(out_skin_node,hair_name)

# Create Fur
furobjects = furtoolutils.createDefaultFurNodes(container, restskingeo, animskingeo, None)
# Fix Fur Parameters
for obj in furobjects:
    if toolutils.nodeTypeBaseNameMatches(obj, 'guidegroom'):
        obj.setName(obj.name() + "_" + hair_name)
        obj.setCurrent(True, True)   
        obj.parm('vdbsop').set(obj.parm('skinsop').eval() + '/OUT_VDB')
        obj.parm('skinsop').set(obj.parm('skinsop').eval() + '/OUT_' + hair_name)
        #obj.parm('group').set('hair')
        obj.parm('vdbsource').set(1)
        obj.parm("density").set(20000.0)
        obj.parm("densityoverride").set(1)
        obj.parm("densityattrib").set(hair_name)        
        obj.setPosition(restskingeo.position() + hou.Vector2(3*(len(out_skin_node.outputs()) - 2),-1))
        
    if toolutils.nodeTypeBaseNameMatches(obj, 'hairgen'):
        obj.setName(obj.name() + "_" + hair_name)
        obj.parm("density").set(100000.0)          
        obj.parm("influenceradius").set(0.005)
        obj.setDisplayFlag(False)
        
        obj.parm("densityoverride").set(1)
        obj.parm("densityattrib").set(hair_name)
        
        obj.setPosition(restskingeo.position() + hou.Vector2(3*(len(out_skin_node.outputs()) - 2),-2))
active_pane.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="LZ N2S" label="LZ N2S" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[script = ''
for n in hou.selectedNodes():
    # CREATION AND POSITION
    # comment
    newline = '#create ' + n.name() + ' node' 
    script += '\n' + newline + '\n'
    # if we have a parent node
    if len(n.inputs()) > 0:
        if not n.inputs()[0].isSelected():
            newline = n.inputs()[0].name() + ' = '
            script += newline + '\n' 
        # create node
        newline = n.name() +' = ' + n.inputs()[0].name() + '.createOutputNode("' + n.type().name() + '","' + n.name() + '")'
        script += newline + '\n'
        # set position
        dpos = n.position() - n.inputs()[0].position()
        newline = n.name() +'.setPosition(' + n.inputs()[0].name() + '.position() + hou.Vector2(' + str(dpos.x()) + ',' +str(dpos.y()) + '))'
        script += newline + '\n'
    else:
        # create node
        if n.parent().path() == '/obj':
            newline = 'obj = hou.node("/obj")'
            script += newline + '\n'
        else :
            newline = n.parent().name() + ' = '
            script += newline + '\n' 
        newline = n.name() +' = ' + n.parent().name() + '.createNode("' + n.type().name() + '","' + n.name() + '")'
        script += newline + '\n'
     
    # PROCESS PARAMETERS    
    for p in n.parms():
        if not p.isAtDefault():
            if type(p) is hou.Parm:
                # Notify if parm is spare
                if p.isSpare():
                    newline = '#This is a Spare Parameter!'
                    script += newline + '\n'
            
                # If parm is keyframed(has an expression) copy it's expression, else only the value
                if p.keyframes() == ():
                    pt = p.parmTemplate()
                    pval = str(p.eval())
                    # if the parm is string -> unexpand it and add double qoutes
                    if pt.dataType() == hou.parmData.String:                
                        pval = repr(p.unexpandedString())
                        #pval = '"' + pval +  '"'
                    newline = n.name() + '.parm("' + p.name() + '").set(' + pval + ')'
                    script += newline + '\n'
                else:
                    lang = p.expressionLanguage()
                    expr = p.expression()
                    newline = n.name() + ".parm('" + p.name() + "').setExpression('" + expr + "',language = hou." + str(p.expressionLanguage()) + ')'
                    script += newline + '\n'
    if n.isDisplayFlagSet():
        newline = n.name() + '.setDisplayFlag(True)'
        script += newline + '\n'

# PRINT SCRIPT AND COPY TO CLIPBOARD
print script

#import PySide2.QtGui as qtg
#app = qtg.QApplication.instance()
#clipboard = app.clipboard()
#clipboard.setText(script)

from PySide2.QtWidgets  import  QApplication
QApplication.clipboard().setText(script)



]]></script>
  </tool>

  <tool name="LZ kwargs" label="LZ kwargs" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[print ""
for key in kwargs.keys():
    print key + ' = kwargs["' + key + '"] #is ' + str(kwargs[key])  
    
    
script = 'altclick = kwargs["altclick"]'        + '\n'
script += 'shiftclick = kwargs["shiftclick"]'    + '\n'
script += 'ctrlclick = kwargs["ctrlclick"]'      + '\n'    



from PySide2.QtWidgets  import  QApplication
QApplication.clipboard().setText(script)



]]></script>
  </tool>

  <tool name="Perfomance Monitor" label="Perfomance Monitor" icon="hicon:/SVGIcons.index?CHOP_record.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.4,0.95];
dx = [0.5,0.8];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))  
panel = d.createFloatingPanel(hou.paneTabType.PerformanceMonitor,pos,size)]]></script>
  </tool>

  <tool name="check shelf tool paths" label="check shelf tool paths" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from PySide2.QtWidgets  import  QApplication
shelf = QApplication.clipboard().text()

sh = hou.shelves.shelves()[shelf]
for t in sh.tools():
    if sh.filePath() != t.filePath():
        print t.name()
        
        
shelf = QApplication.clipboard().setText(sh.filePath())]]></script>
  </tool>
</shelfDocument>
