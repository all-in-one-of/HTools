<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="LZ Vex" label="LZ Vex" icon="hicon:/SVGIcons.index?SOP_attribvop.svg" help_url="">
    <script><![CDATA[from hutil.Qt import QtWidgets
import lzutil
                    
#############################################    
##  Interface

class LZ_vex_interface(QtWidgets.QWidget):
    def __init__(self):
        super(LZ_vex_interface, self).__init__() 
        #create Layout
        mainLayout = QtWidgets.QVBoxLayout()
        self.list = QtWidgets.QListWidget()
        self.callbackDict = {}
        
        import json
        hext = hou.expandString('$HEXT')
        self.rules = json.load(open(hext + '/lz_quick_vex.txt'))       
        noises = self.rules['noise']
        for key in noises.keys():
            noise = noises[key]
            self.list.addItem(key)
            self.callbackDict[key] = noises[key]
            
        
#        print self.callbackDict
#            #create widgets        
#            btn = QtWidgets.QPushButton(noise['label'])
#            btn.clicked.connect(test) 
#            mainLayout.addWidget(btn)
#            
#        self.btn = QtWidgets.QPushButton('click_me')
#        self.btn.clicked.connect(self.callback) 
#        mainLayout.addWidget(self.btn)
        
        self.list.clicked.connect(self.doubleClickedList)      
        mainLayout.addWidget(self.list)
        #set Layout
        self.setLayout(mainLayout)

        
    def callback(self):
        for n in hou.selectedNodes():
            if n.type().name() == 'attribwrangle':
                addNoise(n)  

    def doubleClickedList(self,item):
        item = self.callbackDict[item.data()]
        
        for n in hou.selectedNodes():
            # add libs
            if item.has_key('lib'):
                for lib in item['lib']:
                    lzutil.includeAddSafe(n,lib)
            # add code
            if item.has_key('code'):
                lzutil.snippetAddCode(n,item['code'])    
        
            # execute an action
            if item.has_key('action'):
                exec(item['action'])
            
            
def createInterface():
    return LZ_vex_interface()




]]></script>
    <includeInToolbarMenu menu_position="101" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
