<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="LZ Vex" label="LZ Vex" icon="hicon:/SVGIcons.index?SOP_attribvop.svg" help_url="">
    <script><![CDATA[from hutil.Qt import QtWidgets
import lzutil

# number of rows
rows = 2

class LZ_vex_interface(QtWidgets.QWidget):
    def __init__(self):
        super(LZ_vex_interface, self).__init__() 
        #create Layout
        mainLayout = QtWidgets.QGridLayout()        
        self.callbackDict = {}
        
        # read json
        import json
        hext = hou.expandString('$HEXT')
        self.json = json.load(open(hext + '/lz_quick_vex.txt'))       
        
        i = 0
        # fill lists
        for list_key in self.json.keys():
            # create list widget
            new_list = QtWidgets.QListWidget()
            items = self.json[list_key]
            
            for key in sorted(items.keys()):
                new_list.addItem(key)
                self.callbackDict[key] = items[key]
            new_list.doubleClicked.connect(self.doubleClickedList)
            
            # create label
            label = QtWidgets.QLabel(list_key)
            
            #fill
            layout = QtWidgets.QVBoxLayout()             
            layout.addWidget(label)
            layout.addWidget(new_list)
            mainLayout.addLayout(layout,i/rows,i%rows)
            i += 1
         
        #set Layout
        self.setLayout(mainLayout)

    # FUNCTIONS    
    def doubleClickedList(self,item):
        item = self.callbackDict[item.data()]
        # process view node
        n = lzutil.viewNode()
        self.processItem(item,n)

    def processItem(self,item,n):
        # add libs
        if item.has_key('lib'):
            for lib in item['lib']:
                lzutil.includeAddSafe(n,lib)
        # add code
        if item.has_key('code'):
            lzutil.snippetAddCode(n,item['code']) 
        # execute an action
        if item.has_key('action'):
            exec(item['action'])
            
            
def createInterface():
    return LZ_vex_interface()




]]></script>
    <includeInToolbarMenu menu_position="101" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
