<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="Canoe_Assets_interface" label="Canoe Assets Interface" icon="MISC_python" showNetworkNavigationBar="false" help_url="">
    <script><![CDATA[from hutil.Qt import QtWidgets,QtGui,QtCore
from glob import glob
import os
import toolutils

rows = 3

class CanoeAssets(QtWidgets.QWidget):
    def __init__(self):
            
        super(CanoeAssets, self).__init__() 
        # Create Settings
        self.objInstanceToggle = QtWidgets.QCheckBox("Object level Instance") 
        self.PackedAddToggle = QtWidgets.QCheckBox("Create LZ Packed Add") 
        self.PackedAddToggle.setChecked(True)
        
        
        # Create Scroll Area
        scrollArea = QtWidgets.QScrollArea()   
        scrollArea.setWidgetResizable(True)
        scrollWidget = QtWidgets.QWidget()
        scrollArea.setWidget(scrollWidget) 
        scrollLayout = QtWidgets.QGridLayout()
                
        # Fill Main Layout
        # find all folders in our assets directory
        assetsPath = "S:\FPG\Assets\Env"
        files =  glob( assetsPath + "\*")
        i = 0 
        for file in files:            
            # get name
            assetName = file.split("\\")[-1]  
            # check if it has .rs proxy inside
            proxy_filename =  file + "\\1.rs"
            if os.path.isfile(proxy_filename): 
                # check if it's a directory (skip stray files)
                if os.path.isdir(file):                    
                    # Create a button
                    button_size = 150
                    assetWidget = QtWidgets.QPushButton(assetName)
                    assetWidget.setFixedSize(button_size,button_size)               
                    # check for preview
                    previewPath = file + "\\preview.jpg"
                    if os.path.isfile(previewPath):
                        assetWidget.setIcon(QtGui.QIcon(QtGui.QPixmap(previewPath)))
                        assetWidget.setIconSize(QtCore.QSize(button_size, button_size))
                        assetWidget.setText("")
                    # connect clicked action
                    assetWidget.clicked.connect(lambda _file=file:self.createAsset(self.createAsset(_file)))
                    # add to layout
                    scrollLayout.addWidget(assetWidget,i/rows,i%rows)
                    i+=1   
                
        scrollWidget.setLayout(scrollLayout)
        
        # set main layout
        mainLayout = QtWidgets.QGridLayout()
        mainLayout.addWidget(self.objInstanceToggle)
        mainLayout.addWidget(self.PackedAddToggle)
        mainLayout.addWidget(scrollArea)
        self.setStyleSheet("background-color: hsv(0,0,45);")
        self.setLayout(mainLayout)
   
    def createAsset(self,file):
        if file is not None:
            assetName = file.split("\\")[-1]  
            filename =  file + "\\1.rs"
            if os.path.isfile(filename):
                obj = hou.node('/obj')
                proxy_holder = obj.createNode('geo',"RS_" + assetName,True)
                if self.objInstanceToggle.isChecked():
                    # create object level proxy
                    proxy_holder.parm("RS_objprop_proxy_enable").set(1)
                    proxy_holder.parm("RS_objprop_proxy_file").set(filename.replace("\\","/"))
                    proxy_holder.createNode("redshift_proxySOP")
                    proxy_holder.parm("scale").set(0.01)
                    proxy_holder.parm("RS_objprop_proxy_preview").set(2)
                else:
                    wrangle = proxy_holder.createNode("attribwrangle","CreatePoint")
                    wrangle.parm('class').set(0)
                    script = "int pt = addpoint(0,0);\n\n"
                    script += 'string v = itoa(chi("version") + 1);\n' 
                    script += 'string instancefile = "' +file.replace("\\","/")+'/"+v+".rs";\n'
                    script += 'setpointattrib(0,"instancefile",pt,instancefile);\n'
                    script += '\n'
                    script += 'setpointattrib(0,"v",pt,{0,0,0});\n'
                    script += 'setpointattrib(0,"up",pt,{0,1,0});\n\n\n'                    
                    wrangle.parm('snippet').set(script)                    
                    
                    render = wrangle.createOutputNode('null',"RENDER")
                    rsInstance = render.createOutputNode('redshift_instancefileSOP',"PREVIEW")
                    rsInstance.parm("prevMode").set(2)
                    rsInstance.setDisplayFlag(True)            
                    render.setRenderFlag(True) 
                    
                    if self.PackedAddToggle.isChecked():
                        render.destroy() 
                        # Pack node
                        pack = rsInstance.createOutputNode('pack')                                                     
                        pack.parm('createpath').set(0)   
                        # Copy Path Wrangle
                        copyPathWrangle = pack.createOutputNode('attribwrangle',"copy_path")
                        script = 's@path = s@opinput1_instancefile;'
                        copyPathWrangle.parm('snippet').set(script)  
                        copyPathWrangle.setInput(1,wrangle,0)
                        # Merge
                        merge = copyPathWrangle.createOutputNode('merge')
                        # Packed Add                        
                        packedAdd = merge.createOutputNode('LZ_PackedAdd')
                        packedAdd.parm("random_initial_rotation").set(1)
                        packedAdd.parm("random_initial_rotation").set(multiple_instances)
                        # instance_from_id wrangle
                        wrangle2 = packedAdd.createOutputNode("attribwrangle","instance_from_id")
                        wrangle2.parm('snippet').set('s@instancefile = point(1,"path",i@id);')
                        wrangle2.setInput(1,merge,0)
                        render = wrangle2.createOutputNode('null',"RENDER")
                        packedAdd.setDisplayFlag(True)            
                        render.setRenderFlag(True) 
                        # Jump into wrangle
                        packedAdd.setSelected(True)                        
                        sv = toolutils.sceneViewer()
                        sv.enterCurrentNodeState()
                        
                        # Layout
                        wrangle.move(hou.Vector2(0,-1))
                        rsInstance.move(hou.Vector2(-1.3,0))
                        pack.move(hou.Vector2(-1.3,0))
                        packedAdd.move(hou.Vector2(-1.3,0))
                    
                proxy_holder.moveToGoodPosition()

def onCreateInterface():
    return CanoeAssets()

    
]]></script>
    <includeInToolbarMenu menu_position="105" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
