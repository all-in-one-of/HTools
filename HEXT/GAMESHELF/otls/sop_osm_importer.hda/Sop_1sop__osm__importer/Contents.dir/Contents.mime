MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = sop_osm_importer
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -1.65294 1.30971
connectornextid 0
flags =  lock off model off template off footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create 1502204067
  modify 1502204073
  author Luiz@Luiz-PC
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.init"
Content-Type: text/plain

type = python
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -1.56241 7.89523
connectornextid 1
flags =  lock off model off template on footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create 1500592402
  modify 1502204086
  author Luiz@Luiz-PC
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"import re
from math import sin, cos, sqrt, atan2, radians
import xml.etree.cElementTree as ET

# approximate radius of earth in km
R = 6373.0

def latlong_distance(lat_long_1, lat_long_2):

    lat1 = radians(lat_long_1[0])
    lon1 = radians(lat_long_1[1])
    lat2 = radians(lat_long_2[0])
    lon2 = radians(lat_long_2[1])

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance * 1000


class OSMNode(object):
    def __init__(self):
        self.id = True
        self.lat = 0
        self.lon = 0
        self.tags = {}

    @classmethod
    def from_xml(cls, xml_node):
        self = cls()

        self.id = int(xml_node.attrib[\"id\"])
        self.lat = xml_node.attrib[\"lat\"]
        self.lon = xml_node.attrib[\"lon\"]
        for child in xml_node:
            if child.tag == \"tag\":
                clean_tag = re.sub('[^a-zA-Z0-9\\n]', '', child.attrib[\"k\"])
                self.tags[clean_tag] = child.attrib[\"v\"]

        return self


class OSMWay(object):

    def __init__(self):
        self.id = 0
        self.tags = {}
        self.nodes = []

    @classmethod
    def from_xml(cls, xml_node):
        self = cls()

        self.id = int(xml_node.attrib[\"id\"])
        for child in xml_node:
            if child.tag == \"tag\" and \"k\" in child.attrib:
                clean_tag = re.sub('[^a-zA-Z0-9\\n]', '', child.attrib[\"k\"])
                self.tags[clean_tag] = child.attrib[\"v\"]

            if child.tag == \"nd\" and \"ref\" in child.attrib:
                self.nodes.append(int(child.attrib[\"ref\"]))

        return self


class OSMParser(object):
    def __init__(self, osm_file):
        self.osm_file = osm_file

        self.min_lat = 0
        self.max_lat = 0

        self.min_lon = 0
        self.max_lon = 0

        self.length = 0
        self.height = 0

        self.ways = []
        self.nodes = {}
        self.tagged_nodes = []
        self.tags= []

    def get_size(self):
        self.length = latlong_distance([self.min_lat, self.min_lon], [self.max_lat, self.min_lon])
        self.height = latlong_distance([self.min_lat, self.min_lon], [self.min_lat, self.max_lon])

    def get_relative_coordinates(self, lat_long):
        rel_lat = (lat_long[0] - self.min_lat) / (self.max_lat - self.min_lat) * self.length
        rel_lon = (lat_long[1] - self.min_lon) / (self.max_lon - self.min_lon) * self.height

        return rel_lat, rel_lon

    def build(self):
        import hou
        node = hou.pwd()
        geo = node.geometry()

        # add some detail attributes
        geo.addAttrib(hou.attribType.Global, \"min_lat\", self.min_lat)
        geo.addAttrib(hou.attribType.Global, \"max_lat\", self.max_lat)
        geo.addAttrib(hou.attribType.Global, \"min_lon\", self.min_lon)
        geo.addAttrib(hou.attribType.Global, \"max_lon\", self.max_lon)

        for tag in self.tags:
            geo.addAttrib(hou.attribType.Prim, tag, \"\")

        if not geo.findPrimAttrib(\"hou_id\"):
            geo.addAttrib(hou.attribType.Prim, \"hou_id\", 0)

        if not geo.findPrimAttrib(\"hou_way\"):
            geo.addAttrib(hou.attribType.Prim, \"hou_way\", 0)

        if not geo.findPrimAttrib(\"hou_node\"):
            geo.addAttrib(hou.attribType.Prim, \"hou_node\", 0)


        for way in self.ways:
            positions = []
            for node_id in way.nodes:
                node = self.nodes[node_id]
                pos_xy = self.get_relative_coordinates([float(node.lat), float(node.lon)])
                positions.append((pos_xy[0], 0, pos_xy[1]))

            points = geo.createPoints(positions)
            poly = geo.createPolygon()

            if \"building\" not in way.tags:
                poly.setIsClosed(0)

            poly.setAttribValue(\"hou_id\", way.id)
            poly.setAttribValue(\"hou_way\", 1)
            for tag in way.tags:
                try:
                    clean_value = re.sub('[^a-zA-Z0-9\\n]', '', way.tags[tag])
                    poly.setAttribValue(tag, clean_value)
                except:
                    print \"Could not set tag: %s with value: %s\"%(tag,clean_value)

            for point in points:
                poly.addVertex(point)

        if hou.node(\"..\").parm(\"build_nodes\").eval():
            for node in self.tagged_nodes:
                pos_xy = self.get_relative_coordinates([float(node.lat), float(node.lon)])
                points = geo.createPoints([(pos_xy[0], 0, pos_xy[1])])
                poly = geo.createPolygon()
                poly.setIsClosed(0)
                poly.setAttribValue(\"hou_id\", node.id)
                poly.setAttribValue(\"hou_node\", 1)
                for tag in node.tags:
                    try:
                        clean_value = re.sub('[^a-zA-Z0-9.,\\n]', '', node.tags[tag])
                        poly.setAttribValue(tag, clean_value)
                    except:
                        print \"Could not set tag: %s with value: %s\"%(tag,clean_value)
                for point in points:
                    poly.addVertex(point)


    def parse(self):

        tags = []
        for event, child in ET.iterparse(self.osm_file):
            if child.tag == \"bounds\":

                self.min_lat = float(child.attrib[\"minlat\"])
                self.max_lat = float(child.attrib[\"maxlat\"])
                self.min_lon = float(child.attrib[\"minlon\"])
                self.max_lon = float(child.attrib[\"maxlon\"])
                self.get_size()
                child.clear()

            if child.tag == \"way\":
                way = OSMWay.from_xml(child)
                tags.extend(way.tags.keys())
                self.ways.append(way)
                child.clear()

            if child.tag == \"relations\":
                pass #TODO: Handle Relations

            if child.tag == \"node\":

                node = OSMNode.from_xml(child)
                tags.extend(node.tags.keys())
                self.nodes[node.id] = node

                if len(node.tags.keys()):
                    self.tagged_nodes.append(node)

                child.clear()

        self.tags = list(set(tags))

osm_file = hou.node(\"..\").parm(\"osm_file\").eval()
parser = OSMParser(osm_file)
parser.parse()
parser.build()
"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"16.0.600"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
