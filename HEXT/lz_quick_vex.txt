{
	"01 1D Noises":{
	
		"Turb: 1D: Original Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','ofn')"},
		"Turb: 1D: Alligator" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','afn')"},
		"Turb: 1D: Sparse Convultion" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','sfn')"},
		"Turb: 1D: Simplex" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','xfn')"},
		"Turb: 1D: Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','pfn')"},
		"Turb: 1D: Corrected Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','cfn')"},

				
		"AA: 1D: Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','apfn')"},		
		"AA: 1D: Simplex" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','asfn')"},

		"AA:1D:Flow" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','aaffn')"},	
				
		
		"Other: 1D: Worley Seed" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','wseed')"},		
		"Other: 1D: Worley F1" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','wf1')"},
		"Other: 1D: Worley F2" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','wf2')"},
		"Other: 1D: Boxes" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','boxes')"},
		"Other: 1D: Spheres" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'float','spheres')"}		
		},
	"02 3D noises":{	
		"Turb: 3D: Original Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','ovn')"},
		"Turb: 3D: Alligator" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','avn')"},	
		"Turb: 3D: Sparse Convultion" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','svn')"},	
		"Turb: 3D: Simplex" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','xvn')"},
		"Turb: 3D: Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','pvn')"},
		"Turb: 3D: Corrected Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','cvn')"},
				
				
		"AA: 3D: Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','apvn')"},		
		"AA: 3D: Simplex" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','asvn')"},

		"AA:3D:Flow" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','aafvn')"},				
		
		"CURL: 3D: Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','cpn')"},
		"CURL: 3D: Original Perlin" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','con')"},
		"CURL: 3D: Sparse Convultion" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','csn')"},
		"CURL: 3D: Alligator" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','can')"},
		"CURL: 3D: Simplex" : {
				"action":"lzutil.addNoiseScriptAndParmsToSnippet(n,'vector','cxn')"}
		},
	

	"03 Noise Process":{
		"01. Vector displace" : {
				"code":"@P += n1;"},
		"02. Displace along normal" : {
				"code":"@P += @N*n1;"},	
		"03. Dont Export N" : {
			"action":"n.parm('vex_outputmask').set('* ^N')"	},
		"04. Delete N Attribute(point)" : {
			"action":"n.createOutputNode('attribdelete').parm('ptdel').set('N')"},
		"05. Create Rest" : {"code":"v@rest = @P;"},	
		"06. Restore Rest" : {"code":"@P = v@rest;"}	
		
		},	
		
	"04 Modelling Vex":{
		"01. Simple Spiral":{"code": "@P.y = chf('h')*f@u;\n@P.x = ch('r')*sin(f@u*chf('f')*6.18);\n@P.z = ch('r')*cos(f@u*chf('f')*6.18);"},
		"02. Get Curve u":{"code":"f@u = float(@ptnum)/@numpt;"},
		"03. Maketransform":{"code":"matrix t = maketransform(0,0,chv('translate'),chv('rotate'),chv('scale'));\n@P*=t;"}
	},	
	

	
	"05 UTIL Scripts":{
		"01. Include lzn.h" : {
				"action":"lzutil.includeAddSafe(n,'lzn')"},	
		"02. Remove by Tres(points)" :{
				"code":"if(rand(@ptnum)<chf('tres')) removepoint(0,@ptnum);"},
		"03. Read Texture" :{
				"code":"v@Cd = texture(chs('texture_path'),@uv.x,@uv.y);"},
		"04. Extract intrinstic xform" :{
				"code":"v@pivot = primintrinsic(0,'pivot',@ptnum);\n3@transfrom = primintrinsic(0,'transform',@ptnum);"},
		"05. Move To Points" :{
				"code":"int pt = nametopoint(1,s@name);\nmatrix3 t = point(1,'t',pt);\nvector pivot = point(1,'pivot',pt);\nsetprimintrinsic(0,'transform',@ptnum,t);\n@P = point(1,'P',pt);"},		
		"06. Move To Simmed Pieces":{
			"code":"int pt = nametopoint(1,s@name);\n@P = point(1,'P',pt);\n\nmatrix3 t = primintrinsic(1,'transform',pt);\nsetprimintrinsic(0,'transform',@ptnum,t);\n\nvector pivot =  primintrinsic(1,'pivot',pt);\nsetprimintrinsic(0,'pivot',@ptnum,pivot);\nv@v = point(1,'v',pt);"},		
		"07. Bullet Settings ":{
			"code" : "i@active = chi('active');\ni@animated = chi('animated');\n\n//f@min_activation_impulse = chf('min_activation_impulse');\n//f@density = chf('density');"},		
		"08. Bottom Inactive ":{
			"code" : "if( @P.y<chf('tres')) i@active = 0;"},
		"09. Sphere Sprite ":{
			"code" : "v@spritescale = {1,1,1};\ns@spriteshop = '/obj/sim/popnet/popsprite1/shopnet1/spritefog';\np@spriteuv = {0,0,1,1};"}	
		},		
				
	"06 Model":{
		"00. Null" : {"node":"null"},
		"01. Duplicate" : {"node":"copyxform"},
		"02. Polyextrude" : {"node":"polyextrude"},
		"03. Bevel" : {"node":"polybevel"},
		"04. Subdivide" : {"node":"subdivide"},
		"05. Copy To Points" : {"node":"copytopoints"},
		"06. Transform" : {"node":"xform"},
		"07. Polyframe" : {"node":"polyframe"},
		"08. Resample" : {"node":"resample"}
		},
		
	"07 Nodes":{
		"01. Wrangle" : {"node":"attribwrangle"},
		"02. AttribDelete" : {"node":"attribdelete"},
		"03. AttribPromote" : {"node":"attribpromote"},
		"04. AttribTransfer" : {"node":"attribtransfer"}
		},
		
	"08 Vex Functions":{
		"01. removepoint": {"code":"removepoint(0,@ptnum);"},
		"02. removeprim": {"code":"removeprim(0,@primnum,1);"},
		"03. volumesample": {"code":"float density = volumesample(1,0,@P);"},
		"04. fit": {"code":" = fit(,chp('fit').x,chp('fit').y,chp('fit').z,chp('fit').w);"}
		
	},		

	"09 FOLDERS":{
		"01. Open HEXT Folder" : {
			"action":"lzutil.openFolderFromEnv('$HEXT')"},
		"02. Open HC Folder" : {
			"action":"lzutil.openFolderFromEnv('$HC/$HIPNAME')"},
		"03. Open HMEGA Folder" : {
			"action":"lzutil.openFolderFromEnv('$HMEGA')"},	
		"04. Open Documents Folder" : {
			"action":"lzutil.openFolderFromEnv('$HOUDINI_USER_PREF_DIR')"},	
		"05. Open HIP" : {
			"action":"lzutil.openFolderFromEnv('$HIP')"},
		"06. Open JOB" : {
			"action":"lzutil.openFolderFromEnv('$JOB')"}	

			
	},
	
	"10 Fracture":{
		"01. Voronoi Fracture" : {"node":"voronoifracture"},
		"02. Scatter" : {"node":"scatter"},
		"03. Isooffset" : {"node":"isooffset"},	
		"04. Exploded View" : {"node":"explodedview"}				
	},
	"11 VDB":{
		"01. VDB From Polygons" : {"node":"vdbfrompolygons"},
		"02. VDB From Particles" : {"node":"vdbfromparticles"},
		"03. VDB Convert" : {"node":"convertvdb"},
		"04. VDB Combine" : {"node":"vdbcombine"}
	},
	
	"12 Clipboard":{
		"01. opinputpath" : {"clip":"`opinputpath('..',0)`"}
	}
}




















